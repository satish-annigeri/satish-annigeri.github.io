<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Satish Annigeri's Blog</title><link>/</link><description></description><atom:link href="/feeds%5Csatish-annigeri.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 14 Aug 2014 00:00:00 +0530</lastBuildDate><item><title>Installing Anaconda Scientific Python on Microsoft Windows</title><link>/installing-anaconda-scientific-python.html</link><description>&lt;p&gt;Installing and managing Anaconda scientific Python distribution on Microsoft Windows&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;Python along with scientific computing modules NumPy, Matplotlib, SciPy, Pandas, SymPy and the rest is an excellent platform for numerical computation and data visualization. IPython Notebook has changed the way scientific computing is done, taught and shared. But installing and configuring the scientific computing Python stack is even now a non-trivial task. Distributions such as &lt;a href="http://www.continuum.io"&gt;Anaconda&lt;/a&gt; and &lt;a href="http://www.enthought.com"&gt;Canopy&lt;/a&gt; have addressed this problem, and to a great extent, have succeeded. This post describes installing and confuring Anaconda on Microsoft Windows.&lt;/p&gt;
&lt;p&gt;Both Anaconda and Canopy bundle Python along with most of the scientific computing modules in a single installation file. They also include IPython and an IDE. Each also contains a package manager to add modules that are not bundled with the initial installation. The package manager can update or remove installed packages.&lt;/p&gt;
&lt;p&gt;While both Python distributions have similar features, this post covers Anaconda as that is the one I use. Anaconda has a few features that I think are better:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Has both Python 2 and Python 3 versions.&lt;/li&gt;
&lt;li&gt;The package manager &lt;code&gt;conda&lt;/code&gt; can create and manage multiple virtual Python .&lt;/li&gt;
&lt;li&gt;Create and manage multiple virtual environments, similar to &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Package manager &lt;code&gt;conda&lt;/code&gt; can be installed from &lt;a href="http://pypi.python.org"&gt;PyPi&lt;/a&gt; and can then integrate with the Anaconda Python repository.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;miniconda&lt;/code&gt;, a minimal Python environment and add only those packages you need.&lt;/li&gt;
&lt;li&gt;Create conda compatible packages from your code.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Downloading Anaconda&lt;/h3&gt;
&lt;p&gt;Anaconda Python can be downloaded from Continuum Analytics website at [http://continuum.io/downloads]. You can choose the install file appropriate for your operating systems. Versions are available for Microsoft Windows, GNU/Linux and Mac OS X. Both 32-bit and 64-bit versions are available.&lt;/p&gt;
&lt;p&gt;Once downloaded, installation is straight forward. It is best to choose all default options during installation. Typically, Anaconda is installed on &lt;code&gt;C:\Anaconda&lt;/code&gt;. This creates the default environment and has no name. Instead of Anaconda, you can download and install &lt;code&gt;miniconda&lt;/code&gt; and you can then start with a minimal default environment and add only the modules you need.&lt;/p&gt;
&lt;h3&gt;Managing the Anaconda Default Environment&lt;/h3&gt;
&lt;p&gt;You can list, add, update and remove packages with the Anaconda package manager &lt;code&gt;conda&lt;/code&gt;. You can also search the Anaconda package repository by package name. You can install specific versions of packages instead of the most recent which is installed by default.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt; package manager is a command line tool and can be used from the MS-DOS Prompt. If you chose to add Anaconda to the &lt;code&gt;PATH&lt;/code&gt; environment variable during install, it can be accessed from any directory.&lt;/p&gt;
&lt;p&gt;You can display help about &lt;code&gt;conda&lt;/code&gt; in multiple ways.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda &lt;span class="nb"&gt;help&lt;/span&gt;

C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda -h

C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda &lt;span class="nb"&gt;help &lt;/span&gt;create

C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda create -h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can view information about the installed Anaconda Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda info
Current conda install:

             platform : win-64
        conda version : 3.6.0
  conda-build version : 1.3.5
       python version : 2.7.7.final.0
     requests version : 2.3.0
     root environment : C:&lt;span class="se"&gt;\A&lt;/span&gt;naconda  &lt;span class="o"&gt;(&lt;/span&gt;writable&lt;span class="o"&gt;)&lt;/span&gt;
  default environment : C:&lt;span class="se"&gt;\A&lt;/span&gt;naconda
     envs directories : C:&lt;span class="se"&gt;\A&lt;/span&gt;naconda&lt;span class="se"&gt;\e&lt;/span&gt;nvs
        package cache : C:&lt;span class="se"&gt;\A&lt;/span&gt;naconda&lt;span class="se"&gt;\p&lt;/span&gt;kgs
         channel URLs : http://repo.continuum.io/pkgs/free/win-64/
                        http://repo.continuum.io/pkgs/pro/win-64/
          config file : None
    is foreign system : False
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can view the list of all installed packages. Packages installed by &lt;code&gt;pip&lt;/code&gt; package manager are indicated with &lt;code&gt;&amp;lt;pip&amp;gt;&lt;/code&gt; in the third column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda list
&lt;span class="c"&gt;# packages in environment at C:\Anaconda:&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
_license                  1.1                      py27_0
alembic                   0.6.5                     &amp;lt;pip&amp;gt;
anaconda                  2.0.1                np18py27_0
...
xlwt                      0.7.5                    py27_0
yapsy                     1.10.423                  &amp;lt;pip&amp;gt;
zope.interface            4.1.1                     &amp;lt;pip&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can search the Anaconda package reporitory for a package you are looking for by choosing a suitable search pattern. If there is a package in the repository matching your pattern, you are shown the complete list of all available versions, with the installed version indicated by an asterisk.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda search 
Fetching package metadata: ..
matplotlib                   1.1.1                np16py27_2  defaults        
                             1.2.0                np16py27_0  defaults        
                             1.2.0                np17py33_1  defaults        
                             1.2.0                np17py27_1  defaults        
                             1.2.0                np16py27_1  defaults        
                             1.2.1                np17py33_0  defaults        
                             1.2.1                np17py27_0  defaults        
                             1.2.1                np17py33_1  defaults        
                             1.2.1                np17py27_1  defaults        
                             1.3.0                np17py33_0  defaults        
                             1.3.0                np17py27_0  defaults        
                             1.3.1                np17py33_0  defaults        
                             1.3.1                np17py27_0  defaults        
                             1.3.1                np18py33_1  defaults        
                             1.3.1                np18py27_1  defaults        
                             1.3.1                np17py33_1  defaults        
                             1.3.1                np17py27_1  defaults        
                          .  1.3.1                np18py34_2  defaults        
                             1.3.1                np18py33_2  defaults        
                          *  1.3.1                np18py27_2  defaults        
                             1.3.1                np18py26_2  defaults        
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing a package requires you to know the name of the package, which you can find either from &lt;code&gt;conda search&lt;/code&gt; or from information available from various sources on the Internet or books. Multiple packages can be installed at one go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda install numpy matplotlib scipy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Installing a version of a package older than the most recent can be done as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda install &lt;span class="nv"&gt;matplotlib&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Updating an installed package is done by specifying the name of the package to be updated. The correct name of the installed package can be determined from the &lt;code&gt;conda list&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda update matplotlib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Removing an installed package is done by specifying the name of the package to be removed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda remove matplotlib
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Virtual Environments&lt;/h3&gt;
&lt;p&gt;Traditinally, virtual Python environments are created and managed with &lt;code&gt;virtualenv&lt;/code&gt;. A virtual environment is a sandbox with its own installation of Python and additional packages separate from others. This facilitates creation of custom Python installation along with only the required packages for the purpose of development, testing and any other use.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt;, in addition to managing packages, can also create and manage virtual environments. Each environment must be assigned a unique name which is used to activate it as well as manage it. Thus, it is possible to have a Python 2 environment alongside a Python 3 environment an duse one of them at an y given time. It is also posisble to specify the version of Python or the version of additionlal packages. When a new environment is created, unless specified otherwise, the version of Python installed for the new environment is the same as the one in the default environment. After creating an environment, packages can be added to it, and &lt;code&gt;conda&lt;/code&gt; installes the versions appropriate to the version of Python for the specific environment.&lt;/p&gt;
&lt;p&gt;Creating a new environment requires you to specify a name for the environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda create -n flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can specify the packages to be installed into the environment after creating the environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda create -n flask python flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can specify the version of Python, if different from the default environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda create -n py3flask &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.4 flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can view the information about the newly created environment with the &lt;code&gt;conda info&lt;/code&gt; command. Almost every command described above for the default environment works for a named virtual environment if you specify the environment by name on which the command is to be applied, but not all commands (for example &lt;code&gt;conda info -n py3flask&lt;/code&gt; does not work).&lt;/p&gt;
&lt;p&gt;As an example, to list all packages intalled in the &lt;code&gt;py3flask&lt;/code&gt; environment, the command is &lt;code&gt;conda list -n py3flask&lt;/code&gt;. It is possible to update, remove packages in a specific environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda update -n py3flask flask
C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;conda remove -n py3flask flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is no command to delete an existing environment. But deleting the directory where the environment is installed accomplishes the task. The installed directory can be found using the &lt;code&gt;conda info&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;To use a specific environment, you have to activate it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;activate py3flask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The system prompt changes. the name of the environment appears to the left of the system prompt as a reminder of the environment in use. You have access to all system commands but only the active Python environment is available. To finish working in the environment, use the deactivate command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt;deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You return to the normal system prompt.&lt;/p&gt;
&lt;h3&gt;Installing Packages using &lt;code&gt;pip&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The popular package manager for Python, at least at present, is &lt;code&gt;pip&lt;/code&gt;. &lt;code&gt;pip&lt;/code&gt; has the same features that were described for &lt;code&gt;conda&lt;/code&gt; above because, in my opinion, &lt;code&gt;conda&lt;/code&gt; is consciously designed to resemble it. Thus, &lt;code&gt;pip help&lt;/code&gt;, &lt;code&gt;pip list&lt;/code&gt;, &lt;code&gt;pip install&lt;/code&gt; all work. But, there are some differences too. Updating an installed package is &lt;code&gt;pip install -U flask&lt;/code&gt;. Removing an installed package is &lt;code&gt;pip uninstall flask&lt;/code&gt;. Since &lt;code&gt;pip&lt;/code&gt; does not create and manage environments, the &lt;code&gt;-n&lt;/code&gt; switch does not apply. Since Anaconda package repository is a subset of the Python Packahe Index (PyPI), you will have to use &lt;code&gt;pip&lt;/code&gt; when you wish to install a package that is not in the Anaconda repository. But &lt;code&gt;conda&lt;/code&gt; handles that gracefully, it even indicates which packages are installed from PyPI when you ask for the list of installed packages with &lt;code&gt;conda list&lt;/code&gt;. You can thus have a mix of packages from both repositories.&lt;/p&gt;
&lt;h3&gt;Other Features of &lt;code&gt;conda&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In addition to the features described above, &lt;code&gt;conda&lt;/code&gt; can build packages that can be uploaded to the &lt;a href="https://binstar.org/"&gt;Binstar&lt;/a&gt; service available from Continuum Analytics. Both free and paid plans are available. Another feature is the conversion of &lt;code&gt;conda&lt;/code&gt; packages. There are a few more, but I am yet to use them and so will save it for another post, if at all.&lt;/p&gt;
&lt;h3&gt;Anaconda on GNU/Linux&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt; works almost identically on GNU/Linux as on Microsoft Windows. There are two differences, however. The commands to activate and deactivate are as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$source&lt;/span&gt; activate py3flask
&lt;span class="nv"&gt;$source&lt;/span&gt; deactivate
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Thu, 14 Aug 2014 00:00:00 +0530</pubDate><guid>tag:,2014-08-14:installing-anaconda-scientific-python.html</guid><category>Python</category></item><item><title>Choosing a Static Site Generator for Blogs</title><link>/choosing-a-static-site-generator-for-blogs.html</link><description>&lt;p&gt;Choosing a blogging tool is not as simple as it seems&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;When I got started with my first blog, I chose Blogger. There were several reasons that helped me make up my mind. It was fairly simple to use, came as a part of Google apps, had a choice of themes, allowed me to assign my own domain name. Analytics were great too.&lt;/p&gt;
&lt;p&gt;But it had many shortcomings. Getting it to do syntax highlighting of code was a daunting task. Many people reported being able to do it, but I could never get it to work. Themes and layouts were limited and modifying them was complex. Math typesetting appeared impossible. After using it for 3 years, it was time to look for better solutions. I decided to clarify for myself what I expected from a good blogging tool.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Static site generators v/s blogging engines such as Wordpress et al:&lt;/strong&gt; Static site generators (SSGs) are simple, get the job done with the least fuss and generally get out of your way. Comments may need integration with external tools such as Disqus but overall, simple is better.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Code syntax highlighting:&lt;/strong&gt; Many posts include code. Displaying code with syntax highlighting is an important requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Typesetting mathematics:&lt;/strong&gt; especially in $\LaTeX$ is essential to make posts containing mathematics meaningful and complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Theme and layout:&lt;/strong&gt; Choosing simple and elegant themes without having to become a web designer is important.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Including IPython Notebooks:&lt;/strong&gt; I use IPython Notebooks in my work. Being able to include them in my blog has become an important requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Static Site Generators&lt;/h3&gt;
&lt;p&gt;Static site generators provide a framework wherein you write your post in a markup language such as Markdown or reStructured Text and the SSG generates a static web site, complete with navigation, sidebar, categories, tags and archives. They are primarly blogging tools and treat posts in a special chronological way. Some allow creating pages, which are not posts. You also get a user  customizable theme and layout.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sphinx-doc.org/#"&gt;Sphinx&lt;/a&gt; does a similar thing, but for documentation and is not suited for a blog. Popular choices appeared to be &lt;a href="http://getnikola.com/"&gt;Nikola&lt;/a&gt;, &lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://mynt.uhnomoli.com/"&gt;Mynt&lt;/a&gt;. Nikola and Pelican have similar features while Mynt lacked the completeness of the other two. These are some of the features Nikola and Pelican have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Themable&lt;/li&gt;
&lt;li&gt;Navigation, categories, tags, archives, feeds and pages&lt;/li&gt;
&lt;li&gt;Posts are treated in a special way&lt;/li&gt;
&lt;li&gt;Allow static pages, which are treated differently compared to posts&lt;/li&gt;
&lt;li&gt;Support for both Markdown and reST&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Typesetting Math and render_math Plugin for MathJax&lt;/h3&gt;
&lt;p&gt;Both Markdown and reStructured text can syntax highlight code, but only reST can typeset math. But it is possible to customize Markdown to use MathJax to achieve this. I preferred Markdown so being able to typeset math in Markdown was a requirement. Pelican had a plugin for this purpose, &lt;code&gt;render_math&lt;/code&gt;. Mynt did not have it, but Andrew Fricke was gracious enough to modify Mynt 0.3 beta to do this. Nikola didn't seem to have a plugin for MathJax. So the choice appeared to be Pelican.&lt;/p&gt;
&lt;p&gt;I installed the &lt;code&gt;render_math&lt;/code&gt; plugin. Initially I had some difficulty understanding how to integrate plugins. I put the configuration code in &lt;code&gt;settings.py&lt;/code&gt; and it wasn't working at all. Then I realized I should have put that code in &lt;code&gt;pelicanconf.py&lt;/code&gt;. Then it worked like a charm.&lt;/p&gt;
&lt;h3&gt;Theme&lt;/h3&gt;
&lt;p&gt;I started off with a bare bones Pelican site with the &lt;code&gt;notmyidea&lt;/code&gt; default theme. While it worked, the theme was not to my taste. I then found the &lt;code&gt;pelican-bootstrap3&lt;/code&gt; theme and the Bootswatch customization of Bootstrap 3. That helped me make up my mind. I turned off categories from the navigation and created a single static page &lt;strong&gt;About Me&lt;/strong&gt; and enabled static pages on the navigation. I chose the Bootswatch United theme which imitates the Ubuntu website.&lt;/p&gt;
&lt;h3&gt;Final Verdict&lt;/h3&gt;
&lt;p&gt;It took me some time to copy paste posts from Blogger and convert them to markdown. I guess I could have found an import from blogger script somewhere, but the articles weren't too many and so I decided to do it manually. MathJax markup and code had to be done manually anyway. And here is the result for you to see. Google analytics is working and Disqus integration is planned. Google AdSense is some way off.&lt;/p&gt;
&lt;p&gt;It was a great learning experience. I got to understand better how Jinja2 templates work. I got to get a look into how Bootstrap works. Understood a little bit about integrating MathJax into web pages. All in all, it was worth the time I spent.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Wed, 06 Aug 2014 00:00:00 +0530</pubDate><guid>tag:,2014-08-06:choosing-a-static-site-generator-for-blogs.html</guid><category>Blogging</category></item><item><title>Installing a Python 3 Scientific Computing Environment</title><link>/installing-python3-scientific-computing-environment.html</link><description>&lt;p&gt;Installing scientific Python software and a review of some popular scientific Python distributions.&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;Python is a versatile and complete scientific computing environment. With NumPy, SciPy and Matplotlib modules, it gets most of the capabilities that one finds in a barebones Matlab environment. After this, you can choose the modules appropriate to your applications. For example, Pandas adds data structures and analysis tools for data analysis. SymPy brings symbolic computing to Python. Then there are the development environments that aid exploratory computing - IPython, Spyder, IEP to name a few. And the game changer, &lt;strong&gt;IPython Notebook&lt;/strong&gt; - a web notebook that combines easy documentation using Markdown and $\LaTeX$ with live code, output and graphs that can be easily shared or exported to a number of formats. You couldn't ask for more.&lt;/p&gt;
&lt;p&gt;Setting up a simple scientific computing environment in Python is also a straight forward matter. Download Python, &lt;code&gt;setuptools&lt;/code&gt;, &lt;code&gt;easy_install&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt;. Then use &lt;code&gt;pip&lt;/code&gt; to download and install NumPy, SciPy, Matplotlib, IPython, IPython-notebook, Pandas, SymPy and any other module you wish to use. You can choose either Python 2 or Python 3. However, choosing Python 2 is the preferred choice at present, especially if some modules you wish to use may not yet be ported to Python 3 as yet.&lt;/p&gt;
&lt;p&gt;Some modules such as Cython may require Python development libraries be installed and &lt;code&gt;gcc&lt;/code&gt; compiler be available. While this may not pose a problem for GNU/Linux or Mac OS X users, it can be a pain for Windows users. Fortunately, pre-compiled 32-bit and 64-bit binary versions for Windows, for both Python 2 and Python 3, are available at &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;Christoph Gohlke's Python Windows binaries&lt;/a&gt;. However, if you end up with a situation where things do not work, it is best to try one of the ready to install scientific Python distributions, described below.&lt;/p&gt;
&lt;p&gt;With Python gaining significant ground in scientific computing and data analysis, several scientific Python distributions are now available. Notable among them are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://store.continuum.io/cshop/anaconda"&gt;Anaconda by Continuum Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.enthought.com/products/canopy/"&gt;Enthought Canopy by Enthought&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As of this writing, Anaconda has distributions with Python 2 and Python 3 in 32-bit and 64-bit for GNU/Linux, Windows and Mac OS X. Enthought has a Python 2 based distribution in 32-bit and 64-bit for GNU/Linux, Windows and Mac OS X. Both have their own package manager, similar to &lt;code&gt;pip&lt;/code&gt;. Anaconda package manager &lt;code&gt;conda&lt;/code&gt;, in addition to managing packages, can also create virtual Python environments similar to &lt;code&gt;virtualenv&lt;/code&gt;.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 05 Aug 2014 00:00:00 +0530</pubDate><guid>tag:,2014-08-05:installing-python3-scientific-computing-environment.html</guid><category>Python</category><category>Scientific Computing</category></item><item><title>Importing Modules into a Python Program</title><link>/importing-module-into-a-python-program.html</link><description>&lt;p&gt;In Python, a module introduces a new namespace and adds functions, classes and variables into your programs, enabling them to do things which they would not be able to without the capabilities imported from the module. &lt;/p&gt;
&lt;p&gt;"Modules" in Python are what other programming languages call "libraries". You import a module with the import statement. Modules typically contain valid lines of Python code, which get included into your Python program, at the line where the import statement appears, verbatim. Hence a module can import variables, functions, classes or executable statements.&lt;/p&gt;
&lt;p&gt;In addition to importing lines of code, a module also introduces a new namespace into your program, which is the same as the name of the module. A namespace isolates code imported from a module from the code in your own program. Consequently, to call a function named &lt;code&gt;func&lt;/code&gt; defined in a module named &lt;code&gt;mod&lt;/code&gt;, the function call is &lt;code&gt;mod.func()&lt;/code&gt;. For example, to call the function &lt;code&gt;sqrt()&lt;/code&gt; in the module &lt;code&gt;math&lt;/code&gt;, first import the &lt;code&gt;math&lt;/code&gt; module and then call it as &lt;code&gt;math.sqrt(4)&lt;/code&gt;. The program snippet to this is shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output from the above lines is 2.0. The advantage of creating a separate namespace is that, if you so wish for whatever reason, you can define your own function with the name &lt;code&gt;sqrt()&lt;/code&gt;, same as the one in the &lt;code&gt;math&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;If you find this method of calling functions from a module cumbersome, it is possible to merge the code from the module into the default namespace in which your own program exists. Then you could call the imported function directly without having to refer to its module name. But then you would lose the ability to define your own function having the same name as the one imported from the module. The following lines of code demonstrate how to accomplish this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above import statement imports everything from the math module and merges it with your own program. Sometimes, you may wish to import only the function &lt;code&gt;sqrt()&lt;/code&gt; from the math module instead of importing everything. This is accomplished as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is another way to import a module. Suppose you wish to import a module into its own namespace but want to assign a shorter alternative name to the module so that you can save on some typing. For example, it is standard practice to import the NumPy module and assign the name &lt;code&gt;np&lt;/code&gt; to it. From then on, you can refer to the module by the alternate alias that you assigned to it. Here is an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can do the same to a function name instead of to a module, that is, assign an alternative name to a function imported from a module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy.sqrt&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;npsqrt&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;501&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;npsqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whatever I described with reference to a function can be extended to a class or a variable imported from a module.&lt;/p&gt;
&lt;p&gt;It is possible that a module is organized into submodules, especially if a module is large and contains many functions. For example, Matplotlib and SciPy modules contain a number of submodles. It is then necessary to address functions contained in submodules using the full path to the function. For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy.linalg&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This imports &lt;code&gt;scipy.linalg&lt;/code&gt; submodule, which can be demonstrated with the two print statements that print out information about the &lt;code&gt;scipy.linalg&lt;/code&gt; module and the &lt;code&gt;solve&lt;/code&gt; function in the &lt;code&gt;scipy.linalg&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;You must note that importing a module or a submodule creates a new namespace and imports the functions, classes and variables present in the submodule that is imported. However, importing a module does not automatically import its submodules and the contents of the submodules. Each submodule must be imported separately. Therefore the following lines result in an error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;scipy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linalg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is possible to write your own modules so that you or others who have access to your modules can import them into programs. If you wish to do so, remember that the name of the file (without the ".py" filename extension is automatically the name of the module.&lt;/p&gt;
&lt;p&gt;Typically, the Python interpreter searches for modules at predefined directories. To import a module, it must be in one of the pre-defined directories that Python interpreter searches in or in the same directory where the file containing your program resides. If the module file is in a different directory, then you must define an environment variable called &lt;code&gt;PYTHONPATH&lt;/code&gt; whose value is a string containing the list of directories that the Python interpreter will search for modules. Multiple directory name must be separated by a colon (Linux/Unixes) or a semicolon (Windows). The directory name separator is, in fact, defined by os.pathsep.&lt;/p&gt;
&lt;p&gt;If there is a section (or sections) of your module file that you do not wish to be executed when the file is imported as a module but that you wish to execute if the file is executed as a script, put that section of the code within a if &lt;code&gt;__name__ == '__main__'&lt;/code&gt; conditional block. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;statement1&lt;/span&gt;
  &lt;span class="n"&gt;statement2&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;myfinc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python interpreter assigns a name to each module it interprets and executes, and the name of a module is available in the built-in variable &lt;code&gt;__name__&lt;/code&gt;. Thus the statements in such a block are to be executed only if the name of the module from where the file is being executed happens to be &lt;code&gt;'__main__'&lt;/code&gt;, a string constant. The lines will not be executed if the name of the module from where the file is executed is anything other than &lt;code&gt;'__main__'&lt;/code&gt;. If the file is imported, the name of the module is the name of the Python file containing the code and lines in this block will not be executed. If on the other hand, the file is being executed by the Python interpreter as a script, the name of the main module is &lt;code&gt;'__main__'&lt;/code&gt; and consequently, lines in such a block are executed.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Fri, 04 Jan 2013 00:00:00 +0530</pubDate><guid>tag:,2013-01-04:importing-module-into-a-python-program.html</guid><category>Programming</category><category>Python</category></item><item><title>NumPy Array Indexing</title><link>/numpy-array-indexing.html</link><description>&lt;p&gt;Extracting values from and inserting values into a Python list object is intuitive and powerful.&lt;/p&gt;
&lt;p&gt;This post demonstrates how to access elements of a Python list object. Once this concept is understood for a list, it can be easily extended to multi dimensioned NumPy arrays in a straight forward manner.&lt;/p&gt;
&lt;p&gt;Let us first generate a list containing 10 elements, with values starting from 0 upto 9 at an increment of 1. This is easily done using the &lt;code&gt;range()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The list &lt;code&gt;x&lt;/code&gt; has 10 elements, indexed from 0 to 9. Accessing any element of &lt;code&gt;x&lt;/code&gt; requires you to know the index of the element. &lt;code&gt;x[0]&lt;/code&gt; returns the value of the initial element, namely 0. The following for loop prints the values of the elements in &lt;code&gt;x&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same goes for insertion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, you could access any element you wish:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python allows indexing from the end of the list. The index of the last element is -1. Thus, &lt;code&gt;x[-1]&lt;/code&gt; accesses the last element with the value 9. The index of the initial element, counted from the end of the array is -10, hence &lt;code&gt;x[-10]&lt;/code&gt; returns the value of the initial element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In addition to accessing individual elements of a list, it is possible to access a range of elements. To return a list containing the first three elements of &lt;code&gt;x&lt;/code&gt;, the syntax is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;list&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the object &lt;code&gt;y&lt;/code&gt; is of type list. Further, the notation 0:3 means starting from 0, up to but not including, 3. Thus the values returned are from &lt;code&gt;x[0]&lt;/code&gt; to &lt;code&gt;x[2]&lt;/code&gt;, namely, 0, 1 and 2. See if you find what the following expressions will return:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While specifying a range of indices, it is possible to specify the step increment as shown the last two expressions above, which print out the values of the even numbered and odd numbered elements.&lt;/p&gt;
&lt;p&gt;It is also possible to leave out one or more of the start and end indices if they happen to be the first or the last. It is possible to leave out the increment if it is 1. Thus &lt;code&gt;x[:]&lt;/code&gt; is the same as &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[::]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Insertion works in a similar way, as long as the object on the right hand side matches that on the left hand side:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above syntax for extraction, when used on the left hand side does insertion.&lt;/p&gt;
&lt;p&gt;The exact syntax will work with a NumPy array. You can test it out by replacing the command that generates the list with the command that generates a NumPy array, namely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first created a one-dimensioned NumPy array with 12 elements using the list of integers generated by the &lt;code&gt;range(0,12)&lt;/code&gt; function and reshaped it into a two dimensioned array with 3 rows and 4 columns. Note that the shape is specified as a Tuple &lt;code&gt;(3, 4)&lt;/code&gt; and not as two integers &lt;code&gt;3, 4&lt;/code&gt;. We can now perform similar indexing operations on the NumPy array.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Access an individual element by its row and column number: &lt;code&gt;print a[2, 0]&lt;/code&gt; displays the element on last row first column.&lt;/li&gt;
&lt;li&gt;Access one full row: &lt;code&gt;print a[1, :]&lt;/code&gt; prints the entire second row. The column index range &lt;code&gt;:&lt;/code&gt; implies "all columns"&lt;/li&gt;
&lt;li&gt;Access one full column: &lt;code&gt;print a[:, 3]&lt;/code&gt; prints all elements of the last row. Note that you get back a one dimensioned array. The same could also be done this way &lt;code&gt;print a[:, -1]&lt;/code&gt; because the index &lt;code&gt;-1&lt;/code&gt; implies "last"&lt;/li&gt;
&lt;li&gt;Access a sub-array: &lt;code&gt;print a[0:2, 0:3]&lt;/code&gt; prints the sub-array with 2 rows and 3 columns, containing rows 0 and 1 and columns 0, 1 and 2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are more tricks you could perform. &lt;code&gt;print a[:, ::2]&lt;/code&gt; prints all rows and columns 0 and 2. The statement &lt;code&gt;print a[:, -1::-1]&lt;/code&gt; prints all rows with the columns reversed. The general rules are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The row or column index can be a single integer or a list.&lt;/li&gt;
&lt;li&gt;The list can be either generated or explicitly input.&lt;/li&gt;
&lt;li&gt;When the list is generated, it can specify either start and end (in which case the increment is assumed to be 1) or it can specify start, end and increment/decrement. If start value is smaller give an increment otherwise a decrement&lt;/li&gt;
&lt;li&gt;Negative values imply indexing in the reverse direction with &lt;code&gt;-1&lt;/code&gt; representing last and &lt;code&gt;-2&lt;/code&gt; last but one and so on&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Thu, 24 May 2012 00:00:00 +0530</pubDate><guid>tag:,2012-05-24:numpy-array-indexing.html</guid><category>Python</category><category>NumPy</category><category>Arrays</category><category>Scientific Computing</category></item><item><title>Direct Stiffness Method - An Overview</title><link>/direct-stifness-method-overview.html</link><description>&lt;p&gt;A brief overview of the direct stiffness method as applicable to skeletal structures. &lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;The direct stiffness method is a matrix method of structural analysis. This post pertains only to the analysis of skeletal structures, that is, structures that can be modelled using only 1D truss/beam elements in either 2D or 3D space. Further, element stiffness is explicitly derived from first principles.&lt;/p&gt;
&lt;p&gt;In general, a direct stiffness method such as the Finite Element Method, is quite general and can model structures using 1D, 2D (Plate, Plane Stress, Plane Strain elements) and 3D (solid elements) elements in 2D or 3D space.&lt;/p&gt;
&lt;p&gt;Subject to the above mentioned limitations, the direct stiffness method is a procedure to solve the structure stiffness equation, namely&lt;/p&gt;
&lt;p&gt;$$ [k]\{ x \} = \{ P \} $$&lt;/p&gt;
&lt;p&gt;where $\left[ K \right]$ is the structure stiffness matrix, ${ x }$ is the displacement vector and ${ P }$  is the load vector. Depending on the specific problem being solved, $[K]$, ${ x }$ and ${ P }$  can be partitioned into sub-matrices, as follows:&lt;/p&gt;
&lt;p&gt;$$ \begin{bmatrix} K_{11} &amp;amp; K_{12} &amp;amp; K_{13} \\ K_{21} &amp;amp; K_{22} &amp;amp; K_{23} \\ K_{31} &amp;amp; K_{32} &amp;amp; K_{33} \end{bmatrix} \begin{Bmatrix} x_1 \ x_2 \ x_3 \end{Bmatrix} = \begin{Bmatrix} P_1 \ P_2 \ P_3 \end{Bmatrix}$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Row 1: $[K_{11}]$, ${ P_1 }$ are known and ${ x_1 }$ is unknown and to be determined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Row 2: $[K_{22}]$, ${ x_2 }$ are known and ${ x_2 }$ has non-zero elements.  ${ P_2 }$ corresponds reaction components corresponding to known non-zero displacements ${ x_2 }$ and can be determined.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Row 3: $[K_{33}]$, ${ x_3 }$ are known and ${ x_3 }$ has all zero elements.  ${ P_3 }$ corresponds reaction components corresponding to known zero displacements ${ x_3 }$ and can be determined. Since reactions can be computed indirectly from the force components at the ends of members meeting at the support, it is possible to leave out this part of the equation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can rewrite the above equation as three separate equations and each equation can then be rearranged to obtain the unknown in terms of the known, to obtain the following:&lt;/p&gt;
&lt;p&gt;$$[K_{11}] \{x_1=?\} + [K_{12}] \{x_2\} + [K_{13}] \{x_3=0\} = \{P_1\} \Rightarrow \{x_1\} = [K_{11}]^{-1} (\{P_1\}  - [K_{12}] {x_2}) \\
[K_{21}] \{x_1\} + [K_{22}] \{x_2\} + [K_{23}] \{x_3=0\} = \{P_2=?\} \Rightarrow \{P_2\} = [K_{21}]\{x_1\} + [K_{22}] \{x_2\} \\
[K_{31}] \{x_1\} + [K_{32}] \{x_2\} + [K_{33}] \{x_3=0\} = \{P_3=?\} \Rightarrow \{P_3\} = [K_{31}]\{x_1\} + [K_{32}] \{x_2\}
$$&lt;/p&gt;
&lt;p&gt;In the above equations, unknown vectors are indicated by the question mark. Since {x3}={0}, its multiplication with any matrix is also zero.&lt;/p&gt;
&lt;p&gt;If the structure has only known zero displacements at supports and no known non-zero displacements (support settlements), the entire second row and second column of $[K]$, namely, $[K_{22}]$ as well as second sub-matrix ${P_2}$ and ${x_2}$ are null. In that case, it is only necessary to assemble $[K_{11}]$ in order to determine the unknown displacements ${x_1}$. In order to determine the reactions corresponding to known zero displacements, it is sufficient to assemble $[K_{31}]$ so that $[K_{31}]{x_1}={P_3}$.&lt;/p&gt;
&lt;p&gt;According to this scheme of solving the stiffness equation, the degrees of freedom are numbered in the sequence adopted above, namely, unknown displacements first, known non-zero displacements (if any) next and known zero displacements last.&lt;/p&gt;
&lt;p&gt;Accordingly, while assembling the stiffness matrix, the following stiffness matrices are assembled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$[K_{11}]$ is required always&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$[K_{12}]$, $[K_{22}]$ and $[K_{32}]$ are required only if the the structure has one or more known non-zero displacements. None of them is required if the structure has no known non-zero displacements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;$[K_{31]}$ and $[K_{32}]$ are required if reactions are to be computed. $[K_{31}]$ is not required if reactions are computed from member end forces.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since it is possible to compute the reactions from the known forces at the ends of members (which in turn are obtained from known displacements at nodes), it is not necessary to use the second and third equations above (expanded from the stiffness equation expanded in terms of sub-matrices) to calculate the reactions. However, if there are known non-zero displacements in a structure, it is necessary to assemble $[K_{12}]$ in order to calculate ${x_1}$.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 22 May 2012 00:00:00 +0530</pubDate><guid>tag:,2012-05-22:direct-stifness-method-overview.html</guid><category>Structural Analysis</category><category>Direct Stiffness Method</category></item><item><title>NumPy Arrays</title><link>/numpy-arrays.html</link><description>&lt;p&gt;NumPy ndarray is a versatile n-dim array implementation and quite different compared to Scilab matrices. Let us examine how NumPy and Scilab define and use arrays.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Scilab&lt;/strong&gt;, all arrays are treated as two dimensional arrays. Therefore, size of a scalar in Scilab is reported as 1x1, that is 1 row and 1 column. So, there is no such thing as a vector or a one-dimensioned array. A row vector is a matrix with only one row while a column vector is a matrix with only one column. Of course, Scilab does support arrays with more than 2 dimensions. The size of an object in Scilab is reported by the function &lt;code&gt;size()&lt;/code&gt; and number of elements is reported by the function &lt;code&gt;length()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="no"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;constant&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;1.&lt;/span&gt;   &lt;span class="mf"&gt;1.&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;1.&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
&lt;span class="n"&gt;constant&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;3.&lt;/span&gt;   &lt;span class="mf"&gt;4.&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;12.&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
&lt;span class="nb"&gt;hypermat&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;3.&lt;/span&gt;   &lt;span class="mf"&gt;4.&lt;/span&gt;   &lt;span class="mf"&gt;5.&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ans&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt;
   &lt;span class="mf"&gt;3.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Observe that the three dimensioned array &lt;code&gt;c&lt;/code&gt; is of type &lt;strong&gt;hypermat&lt;/strong&gt; and not constant (like &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Unlike Scilab, &lt;strong&gt;NumPy&lt;/strong&gt; defines a generalized n-dimensioned (&lt;code&gt;numpy.ndarray&lt;/code&gt;) array. Thus scalars, vectors, matrices and arrays with higher dimensions are all distinct. A vector has only one dimension, a matrix has two dimensions and it is possible to define arrays with arbitrarily any number of dimensions. The size of an array is reported by the object attribute &lt;code&gt;shape&lt;/code&gt;, which returns a tuple containing the size of each dimension. Attribute &lt;code&gt;shape&lt;/code&gt; is specific to &lt;code&gt;numpy.ndarray&lt;/code&gt; and cannot be applied to non-NumPy objects. Therefore, scalars are distinct from arrays. Vector is an array with the least number of dimensions, namely, one. Matrices are arrays with two dimensions. There can be arrays with higher dimensions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;1L&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numpy.ndarray&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;3L&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numpy.ndarray&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;3L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;4L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numpy.ndarray&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;3L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;4L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;5L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;numpy.ndarray&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So here is what the attribute shape, and functions &lt;code&gt;size()&lt;/code&gt; and &lt;code&gt;len()&lt;/code&gt; report:
1. &lt;code&gt;shape&lt;/code&gt; returns a tuple. The elements of the tuple give the lengths of the corresponding array dimensions
2. &lt;code&gt;size()&lt;/code&gt; returns the number of elements along a given axis. The axis along which the elements are counted is an optional second argument. If it is not given, by default, size returns the total number of elements
3. &lt;code&gt;len()&lt;/code&gt; returns the number of items of a sequence or a mapping. Thus, &lt;code&gt;len(c)&lt;/code&gt; is 3, &lt;code&gt;len(c[0])&lt;/code&gt; is 4 and &lt;code&gt;len(c[0, 0])&lt;/code&gt; is 5. Note that &lt;code&gt;c&lt;/code&gt; is the entire 3-dimensioned ndarray, &lt;code&gt;c[0]&lt;/code&gt; is the first item of the 3-dimensioned array, which is a 2-dimensioned array and &lt;code&gt;c[0, 0]&lt;/code&gt; is the first item of &lt;code&gt;c[0]&lt;/code&gt; and hence a 1-dimensioned array.&lt;/p&gt;
&lt;p&gt;One advantage that NumPy &lt;code&gt;ndarray&lt;/code&gt; has is that it can be reshaped (without changing the data) as long as the total number of elements remains unchanged. Therefore, a matrix of size 3x4 can be reshaped to 6x2 or 4x3 because they all have exactly 12 elements. In fact, it could be reshaped to a vector or to a 3 dimensioned array too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="il"&gt;3L&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="il"&gt;4L&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="o"&gt;...&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;

       &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;

       &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is what we did:
1. Created a 2-dim array of size 3x4
2. Reshaped it to a 1-dim array with 12 elements
3. Then reshaped it to a 2-dim array with 12 rows and 1 column
4. Finally reshaped it to a 3-dim array of size 3x2x2 (3 card with each card having 2 rows and 2 columns)&lt;/p&gt;
&lt;p&gt;While reshaping arrays, it is possible to leave size of one of the dimensions unspecified and let Python work out the required size (as long as a size is possible). Thus, specifying the size of one of the dimensions as -1 indicates that the corresponding size must be computed by NumPy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
       &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If it is not possible to have the specified shape, Python reports an error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;
   &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;unchanged&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python arrays, are by default, row-major arrays (similar to C arrays) wherein the elements are ordered row by row. But the concept of rows and columns breaks down for arrays with 3 or more dimensions. Hence, it is better to say that the elements are arranged in an order where the right most index varies fastest and left most index varies slowest when the elements are arranged in a 1-dim array. In contrast, column major arrays (similar to Fortran arrays) are arranged such that the left most index varies fastest and right most index varies slowest. It is possible to alter this arrangement of elements using the third optional argument to &lt;code&gt;reshape()&lt;/code&gt;, namely, &lt;code&gt;order='C'&lt;/code&gt; (row-major arrangement), &lt;code&gt;order='F'&lt;/code&gt; (column-major arrangement) or &lt;code&gt;order='A'&lt;/code&gt; (preserve existing arrangement).&lt;/p&gt;
&lt;p&gt;Hint: Using IPython, you could learn all of this quickly using online help. To get help on &lt;code&gt;reshape&lt;/code&gt;, type &lt;code&gt;reshape?&lt;/code&gt; at the IPython prompt and press Enter key.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Thu, 12 Apr 2012 00:00:00 +0530</pubDate><guid>tag:,2012-04-12:numpy-arrays.html</guid><category>Python</category><category>NumPy</category><category>Arrays</category><category>Scientific Computing</category></item><item><title>Direct Stiffness Method - Degree of Freedom Numbering</title><link>/direct-stiffness-method-dof-numbering.html</link><description>&lt;p&gt;An introduction to numbering degree of freedom numbers for direct stiffness method of analysis of skeletal structures.
&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;Direct stiffness method of analysis of skeletal structures represents skeletal structures using one dimensional truss or beam elements and sets up the stiffness equation, namely:&lt;/p&gt;
&lt;p&gt;$$[K]{x} = {P}$$&lt;/p&gt;
&lt;p&gt;where $[K]$ is the structure stiffness matrix, ${x}$ is the column vector of unknown displacements at nodes of the structure and {P} is the column vector of applied loads corresponding to unconstrained degrees of freedom.&lt;/p&gt;
&lt;p&gt;The structure stiffness matrix $[K]$ is symmetric and usually sparse (many elements are zero, and remain zero while solving the stiffness equation). Its size is equal to the number of unknown displacements. Further, number of rows in ${x}$ and ${P}$ is the same as the number of rows in $[K]$. Each row of $[K]$ corresponds to one unknown displacement (degree of freedom), and the corresponding rows of ${x}$ and ${P}$ are related to the displacement associated with a particular row of [K]. Therefore, the process of identifying the number of unknown displacements (degree of kinematic indeterminacy) and assigning a number to each unknown displacement is an important first step in the direct stiffness method.&lt;/p&gt;
&lt;p&gt;Sequence of numbering degrees of freedom is usually arbitrary and any sequence can be followed, as long as numbering is continuous. However, sequence of numbering degrees of freedom becomes important when the structure has known non-zero displacement boundary conditions (sometimes called settlement of supports).&lt;/p&gt;
&lt;p&gt;Even here, numbering sequence within each group is arbitrary, but degrees of freedom must be divided into groups (unknown, known non-zero and known zero displacements) and the groups must be numbered in a particular sequence. This post describes an algorithm to determine the number of degrees of freedom and assigning degree of freedom numbering to the unknown displacements and known non-zero displacements.&lt;/p&gt;
&lt;p&gt;I will use a plane frame to illustrate how the algorithm works, but it could easily be extended to space frames or generalized for other types of structures such as plane or space trusses, floor grids etc. It can even be extended to structures that use elements with more than two nodes per element.&lt;/p&gt;
&lt;p&gt;In general, the number of degrees of freedom (unknown independent displacement components) at a node in a space structure is 6 (3 linear displacements $u_x$, $u_y$ and $u_z$ and 3 rotational displacements $r_x$, $r_y$ and $r_z$ measured with respect to structure coordinate system). However, this can be different for special considerations. For example, consider a plane frame that has all its members lying in a single plane, and all loads applied in the plane of the members. This implies that there are no displacements out of the plane, at any of the nodes. Thus, if a plane frame lies in the x-y plane, the displacements out of the plane, namely, $u_z$, $r_x$ and $r_y$ are zero at each node of the plane frame. Similarly, for a grid floor with all members lying in the horizontal x-z plane and all loads applied in the vertical direction (y direction), the following displacements at each node are zero, $u_x$, $u_z$ and $r_y$.&lt;/p&gt;
&lt;p&gt;There is another way the degrees of freedom per node could be reduced to less than 6. This happens with truss structures (structures where in ALL members are connected at their ends by frictionless hinges). Since nodes in such structures experience only linear displacements and there are no rotational displacements of the nodes, the number of degrees of freedom per node in a plane truss lying in the x-y plane is 2 ($u_x$ and $u_y$) and in a space truss is 3 ($u_x$, $u_y$ and $u_z$).&lt;/p&gt;
&lt;p&gt;Once we know the number of nodes and the degrees of freedom per node, we can easily arrive at the total number of degrees of freedom of the structure. However, every structure must have a sufficient number of degrees of freedom constrained otherwise it will experience rigid body displacements. The constrained displacements are the known zero displacement boundary conditions at nodes which are called supports. Thus, the degree of kinematic indeterminacy is the total number of possible degrees of the structure, less the number of known zero displacement boundary conditions.&lt;/p&gt;
&lt;p&gt;In the direct stiffness method, only that part of the stiffness matrix is assembled that corresponds to the unknown displacements. However, if a structure has known non-zero displacements, those degrees of freedom also have to be included in the assembled stiffness matrix. It is also required to order the displacements such that all unknown displacements are numbered first before numbering the known non-zero displacements.&lt;/p&gt;
&lt;p&gt;One important aspect of numbering the degrees of freedom is how we represent the information about the known zero and known non-zero displacements while describing the input to the program. While there can be many ways in which this could be done, this algorithm adopts the following approach. By default, all displacement components of a node are assumed to be unknown. If one or more displacements at a node are either known zero or known non-zero displacements, it will be considered a support. Only description of displacements at a support is input and all displacements at the rest of the nodes are treated as unknown. Description of displacements at a support is coded as follows:
1 (one) if the displacement component is constrained (known zero displacement)
-1 (negative 1) if the displacement is known non-zero displacement, and
0 (zero) if the displacement is unknown.
For example, consider a fixed support in a plane frame in the x-y plane. Since all displacement components (ux, uy, rz) at a fixed support are constrained, it is coded as (1, 1, 1). The following figure describes the coding for a few selected supports in plane frames in the x-y plane assuming x-axis is horizontal and y-axis is vertical:&lt;/p&gt;
&lt;p&gt;A support in a space frame will have 6 dof per node, but the coding remains the same, that is 1, -1 and zero for known zero, known non-zero and unknown displacement components.&lt;/p&gt;
&lt;p&gt;Here is an algorithm to accomplish the task of numbering the degrees of freedom:
Input&lt;/p&gt;
&lt;p&gt;n, the number of nodes in the structure
dof_per_node, the number of degrees of freedom for each node in the structure. It is 2 for plane trusses in the x-y plane (ux, uy), 3 for plane frames in the x-y plane (ux, uy, rz), 3 for space trusses (ux, uy, uz), 6 for space frames (ux, uy, uz, rx, ry, rz)
bc, the array describing the known zero and known non-zero displacement boundary conditions at support nodes, Number of rows is equal to the number of support nodes. Number of columns is dof_per_node+1. First column is the number of the node which is a support and the remaining columns are coded as described above
Algorithm
Compute the total number of possible unknown displacements (n * dof_per_node)
Initialize an array of size (n x dof_per_node) with all elements zeros. Let us call it the location matrix (lm). Each row of  lm  corresponds to one node of the structure. Each column of  lm  corresponds to one displacement component at the specific node. At this point of time, all elements are zero.
Copy the columns (except the first, which is the number of the node whose constraint conditions are described by the row) from bc into the row corresponding to the row of  lm  corresponding to the number of the node available in column 1 of bc, that is, if the first column of a row in bc is i, place the remaining columns of that row of bc in row i of lm.
Initialize a variable ndof to count the degrees of freedom of the structure
Scan the location matrix lm element by element and do the following:
If an element is 1, replace it with a zero, 
If an element is 0, increment ndof by 1 and replace that element of lm with the updated value of ndof
If an element is -1, leave it as it is
When all elements have been scanned, save the value of variable ndof in a variable ndof_known
Rescan the elements of lm element by element and do the following:
If an element is -1, increment ndof by 1 and replace that element of lm with the updated value of ndof
If an element is anything other than -1, leave it as it is
Output
ndof_unknown, the number of known zero displacements
ndof, the total number of unknown and known non-zero displacements
lm, the location matrix of the structure containing the degree of freedom numbering of each displacement component of all nodes of the structure
Example Problem
The example problem is a plane frame in the x-y plane with 4 nodes and 3 members. Two of the nodes are supports. Node 1 is a pinned support (1, 1, 0) and node 4 is a fixed support with a known non-zero vertical displacement (1, -1, 1). Following figure shows the plane frame being considered:&lt;/p&gt;
&lt;p&gt;The input for the frame is as shown in the figure below:&lt;/p&gt;
&lt;p&gt;At the start of the algorithm, we initialize all elements of the location matrix lm to zero, as shown in the figure below:&lt;/p&gt;
&lt;p&gt;After copying the codes for the support nodes, the numbers in lm are as follows:&lt;/p&gt;
&lt;p&gt;After the first pass of scanning the elements of location matrix lm, replacing 1s with zero and replacing 0s with updated dof numbers, the elements of lm are as follows:&lt;/p&gt;
&lt;p&gt;After the second pass of scanning the elements of lm, replacing -1s with updated dof numbers, the elements of lm are as follows:&lt;/p&gt;
&lt;p&gt;Here is the python code to implement the algorithm and its output:
import numpy as np&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dof_numbering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dof_per_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dof_per_node&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

    &lt;span class="n"&gt;ndof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:])):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ndof&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;
    &lt;span class="n"&gt;ndof_unknown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:])):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ndof&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ndof_unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dof_per_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;num_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="n"&gt;ndof_unknown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dof_numbering&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dof_per_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_nodes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Unknown displacements = &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndof_unknown&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Total dof = &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ndof&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Location Matrix&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Output of the program is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Unknown&lt;/span&gt; &lt;span class="n"&gt;displacements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="n"&gt;dof&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;Location&lt;/span&gt; &lt;span class="n"&gt;Matrix&lt;/span&gt;
&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To learn more, read my short document (but code in Scilab, not Python) Support independent publishing: Buy this e-book on Lulu.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sun, 08 Apr 2012 00:00:00 +0530</pubDate><guid>tag:,2012-04-08:direct-stiffness-method-dof-numbering.html</guid><category>Structural Analysis</category><category>Direct Stiffness Method</category></item><item><title>IPython Notebook</title><link>/ipython-notebook.html</link><description>&lt;p&gt;Interactive Python in your browser.&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;IPython is a souped up Python shell with features such as inline help, tab completion, enhanced support for NumPy, SciPy and Matplotlib and a host of magic functions (IPython commands that begin with %).&lt;/p&gt;
&lt;p&gt;But with version 0.12, IPython goes one step further. It now introduces a web based notebook. This means that you can access IPython running as a web server, either on your local machine or on a server on the network, and access the same interactive IPython shell through your browser.&lt;/p&gt;
&lt;p&gt;An IPython Notebook typically has cells, which can b eeither &lt;strong&gt;code cells&lt;/strong&gt; or &lt;strong&gt;Markdown cells&lt;/strong&gt;. Code cells can contain Python code. Code cells have syntax highlighting. When you want to execute the code you have typed, click the &lt;strong&gt;Run&lt;/strong&gt; button at the top. Output is inserted inline. If your code produces a graphical output using Matplotlib, the graph is shown in a separate window that pops up. You can show graphical input inline with the magic command &lt;code&gt;%matplotlib inline&lt;/code&gt; at the beginning of your code.&lt;/p&gt;
&lt;p&gt;Markdown cells can contain text in Markdown format and can include rich media. You can also embed $\LaTeX$ equations. IPython uses MathJax to display math, which is downloaded from the MathJac CDN when needed. It is possible to install and use a local copy MathJax if you want to display math when not connected to the Internet.&lt;/p&gt;
&lt;p&gt;An IPython Notebook is a simple text file in JSON format. SO you can share a notebook with a friend and the friend can simply run the Notebook to see the code, your documentation and comments as well as output. Being a simple text file, it is easy to integrate with a version control system. The possibilities, especially for teaching and larning appear endless. You could run your own IPython notebook server and access it from anywhere through the network, to code, develop, test and/or run Python code.&lt;/p&gt;
&lt;p&gt;Here are the dependencies:
1. IPython version 0.12 or higher. If you have an older version, do &lt;code&gt;easy_install -U ipython&lt;/code&gt;. If you don't have &lt;code&gt;easy_install&lt;/code&gt;, you can install it using &lt;code&gt;setuptools&lt;/code&gt; either from your operating system package manager (GNU/Linux) or download and install (Microsoft Windows) from PyPI and install with the command &lt;code&gt;python setup.py&lt;/code&gt;
2. Tornado version 2.2. Tornado is a Python web server. If you don't have Tornado installed, install it with the command easy_install tornado&lt;/p&gt;
&lt;p&gt;You are now ready to run IPython notebook server. You can open a console (GNU/Linux) or an MS-DOS prompt (Microsoft Windows) and run the command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will run the Tornado web server and automatically open your browser showing you a web GUI. You can see the IPython prompt and start typing Python code. When done, press Shift+Enter to execute the code and see the results. To shutdown the IPython notebook server, go back to the console/MS-DOS Prompt and press Ctrl+C.&lt;/p&gt;
&lt;p&gt;If you work with NumPy, SciPy and Matplotlib and don't want to bother with importing these modules each time. Simply start IPython notebook server as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pylab&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see inline graphs within the browser (instead of them popping up), use the following command to start IPython notebook server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pylab&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can create a new notebook, save it for use in subsequent sessions, download notebooks to your local storage and upload notebooks from your computer to the notebook server. Here is a screencast (no audio on this one, sorry) to demonstrate basic features of IPython notebook server on Microsoft WIndows. I also tried it on Ubuntu 11.10 and it worked without a hitch.&lt;/p&gt;
&lt;h3&gt;Update&lt;/h3&gt;
&lt;p&gt;IPython and IPython Notebook have undergone rapid development over the past year. IPython Notebook has become the de facto standard for presentations at most IPython conferences. IPython now has &lt;code&gt;nbconvert&lt;/code&gt; built-in into itself and is no longer a separate command. IPython is now language agnostic and can run kernels of other dynamic interactive languages such as Julia, R and a few others. A new project has been hived off from IPython which is programming language agnostic, and is called &lt;a href="http://jupyter.org/"&gt;Jupyter&lt;/a&gt;. Integration of IPython Notebooks into Google Docs is already complete and is expected to be universally available shortly. Kudos to Fernando Perez and the IPython team for giving a software tool that is a game changer for education and open science.&lt;/p&gt;
&lt;p&gt;Here are some changes as of IPython 2.1.0 that you must note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To display graphics inline, the option &lt;code&gt;inline&lt;/code&gt; is no longer available. Instead, use the magic statement &lt;code&gt;%matplotlib inline&lt;/code&gt; at the very start of your notebook.&lt;/li&gt;
&lt;li&gt;To convert your Notebook to several supported formats, use one of the following commands&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;mynotebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt;
&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="n"&gt;mynotebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt;
&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="n"&gt;mynotebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;latex&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;PDF&lt;/span&gt;
&lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="n"&gt;mynotebook&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;slides&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Wed, 14 Mar 2012 00:00:00 +0530</pubDate><guid>tag:,2012-03-14:ipython-notebook.html</guid><category>IPython</category><category>Python</category><category>Notebook</category><category>Scientific Computing</category></item><item><title>A Python Class for Numerical Integration</title><link>/python-class-for-numerical-integration.html</link><description>&lt;p&gt;A Python class implementation of Trapezoidal and Simpson's 1/3 rules. &lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;This is a continuation of my previous post where I implemented a function for Trapezoidal rule. This time around, I will implement a class and include Simpson's rule. Along the way, I will point out the key differences between the procedural and object oriented approaches to programming.&lt;/p&gt;
&lt;p&gt;Let us use the same polynomial function that I used last time, namely,&lt;/p&gt;
&lt;p&gt;$$y(x) = 2x^2 - x - 4 = 0$$&lt;/p&gt;
&lt;p&gt;Here is a graph showing the function as well as values of the function at 5 equally spaced points from a=0 to b=5.&lt;/p&gt;
&lt;p&gt;Summary of values and results of actual and numerical integration of the function by hand are given below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;x&lt;/span&gt;       &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="mf"&gt;1.250&lt;/span&gt;    &lt;span class="mf"&gt;2.500&lt;/span&gt;     &lt;span class="mf"&gt;3.750&lt;/span&gt;     &lt;span class="mf"&gt;5.000&lt;/span&gt;
  &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.000&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.125&lt;/span&gt;    &lt;span class="mf"&gt;6.000&lt;/span&gt;    &lt;span class="mf"&gt;20.375&lt;/span&gt;    &lt;span class="mf"&gt;41.000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Actual Integration
$$ \int_0^5 y(x) dx = \left[ \frac{2}{3} x^3 - \frac{1}{2} x^2 - 4x \right]_0^5 = \frac{2}{3}(5^3 - 0) - \frac{1}{2} (5^2 - 0) - 4 (5 - 0) = \frac{305}{6} = 50.8333$$&lt;/p&gt;
&lt;p&gt;Numerical Integration with 4 equal intervals using:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Trapezoidal Rule:
$$\frac{1.250}{2} \left[ y_0 + 2 (y_1 + y_2 + y_3) + y_4 \right] = 53.4375$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Simpson's 1/3 Rule:
$$\frac{1.250}{3} \left[ y_0 + 4 (y_1 + y_3) + 2 (y_2) + y_4\right] = 50.8333$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since Simpson's 1/3 rule fits a parabola passing through 3 consecutive points, it is exact for polynomials of order 2.&lt;/p&gt;
&lt;p&gt;Now for the key differences in the way you design a program by the procedural and the object oriented (OO) ways:
Procedural programming looks at program design as a matter of subdividing complex tasks into simpler ones and developing a function for each identified task or sub-task.&lt;/p&gt;
&lt;p&gt;OO way considers program design as a matter of identifying objects in the program (actors in a play), identifying their attributes (characteristics of each role in the play) and orchestrating interaction amongst the objects.
Procedural programming (after identifying tasks and sub-tasks) requires the programmer to identify the input and output data for each function as well as data required in the main function and understand how data flows across the different functions and how data is modified by each function. A documentation of the program design using this approach requires a flowchart.&lt;/p&gt;
&lt;p&gt;OO programming requires the programmer to identify attributes of each class in the program and the list of actions that need to be performed on it. Attributes become data fields of the class and tasks to be performed on an object become methods of the class. A documentation of the program using this approach requires class diagrams, class hierarchy diagrams and state diagrams. UML could be an ideal way to represent this information.
In the procedural approach, a program moves from one state to the next in a sequence of function calls, with each function modifying one or more pieces of data. When all function calls are complete, you have the results (hopefully!).&lt;/p&gt;
&lt;p&gt;In the OO approach, a program begins by first creating objects of the required class, initializing their attributes and orchestrating message passing to objects by invoking their methods which alter the attributes. When this orchestration is complete, you have the results (once again, hopefully!).
In the procedural approach, the relationship that exists between the data and the functions which operate on the data is not known to the programming language (because it has no constructs to represent that relationship) and therefore is the responsibility of the programmer to be aware of this relationship and enforce it where necessary.&lt;/p&gt;
&lt;p&gt;In the OO approach, the fact that an object is a bundle of both attributes and methods (which are simply functions that act on the attributes) means that the programming language is aware that the two are related (of course this relationship is initially programmed by the programmer, but once done, it is explicitly known to the language).
So let us design a class for Trapezoidal rule. The questions to ask are:
What are the attributes of the Trapezoidal rule? The answer is
The range over which integration is to be performed, that is, from a to b
Number of equal intervals into which the range is to be divided, that is, n
Either the function to be integrated or the x and y values of the function evaluated at the selected points over the chosen interval
What are the actions to be performed on the objects of the class? The answer is
Calculate the value of the integral using Trapezoidal rule
Being a simple class, it has only a few attributes and just one method. But we need at least one other method, a constructor, so that we can initialize the attributes with data when we create an object of this class. In Python, the constructor has the special name &lt;strong&gt;init&lt;/strong&gt;(). It takes at least one parameter, self, the object on which to operate at run time. Additional parameters are the values required to initialize the attributes.&lt;/p&gt;
&lt;p&gt;The formula for the Trapezoidal rule is:&lt;/p&gt;
&lt;p&gt;$$I = \frac{h}{2} \left[ y_0 + 2 (y_1 + y_2 + \cdots + y_{n-1}) + y_n \right] $$&lt;/p&gt;
&lt;p&gt;where $h = \frac{b - a}{n}$ or $h = x_{i+1} - x_i$&lt;/p&gt;
&lt;p&gt;So here is the class to implement Trapezoidal rule:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the following points:
The above class assumes that the values of the points at which the function is evaluated are stored in the array x, and the values of the function are previously evaluated and stored in y. This needs to be done in the main function, which we will see later.
The sum required to calculate the integral is calculated using Python's indexing techniques. y[-1] is the last element of the array  y. Similarly,  y[1:-1]  is the range of values of y starting from  y[1]  up to (but not including) y[-1] which means up to but not including the last element.
We can use this class by writing the main script (in the same file as the above class, after the completion of the class definition), as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Integral = &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the following points:
1. We explicitly created the data points at which the function is to be evaluated. Note that $n$ is the number of &lt;strong&gt;equal intervals&lt;/strong&gt; into which the range from $a$ to $b$ is divided as well as the index of the last element, because Python uses zero as the index of the start element.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;linspace(firstvalue, lastvalue, numpoints)&lt;/code&gt; takes as arguments, the first value, last value and the number of equally spaced points, both the first and the last values included.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We created the object &lt;code&gt;T&lt;/code&gt; and initialized it with the values $a=0, b=5, x \text{ and }  y$. In this case, it is not necessary to specify the number of intervals because this can be found from the number of elements in $x$ or $y$. The number of points in $x$ and $y$ is one more than the number of intervals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Trapezoidal class assumes that the values in $x$ and $y$ are at equal intervals. It does not explicitly test this, which it could easily do by testing the values in  $x$. In fact, if this is to be taken on trust, we could simply send in the number of equal intervals $n$ and $y$ values since $x$ values are not required to evaluate the integral. The interval width $h$ could then be calculated from $a$, $b$ and $n$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running this program should print out the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Integral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;      &lt;span class="mf"&gt;53.4375&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let us now implement Simpson's 1/3 rule along similar lines. In fact, the difference is very minor and is related to the formula for the sum.  The formula is:&lt;/p&gt;
&lt;p&gt;$$I = \frac{h}{3} \left[ y_0 + 4 (y_1 + y_3 +...+ y_{n-1}) + 2 (y_2 + y_4 + \cdots + y_{n-2}) \right]$$&lt;/p&gt;
&lt;p&gt;Let us add the following code below the Trapezoidal class and above the main script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Simpson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will make a small change in the main script, as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Simpson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Trapezoidal = &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  Simpson&amp;#39;s = &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;integrate&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time, the output should be as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Trapezoidal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;      &lt;span class="mf"&gt;53.4375&lt;/span&gt;
  &lt;span class="n"&gt;Simpson&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;      &lt;span class="mf"&gt;50.8333&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is some food for thought. When the two classes are so similar, can we have a class hierarchy? Can we define an abstract class for numerical integration and make the Trapezoidal and Simspon's rules its child classes? Do we gain from this exercise or is this a waste of effort? Is it possible to create a new child class to implement numerical equation by Gauss Legendre method? Would it make sense to have dissimilar approaches to numerical integration as children of one abstract class?&lt;/p&gt;
&lt;p&gt;It doesn't matter what the final answer is. The very exercise of doing this thinking can teach you a great deal about programming. Well, try your hand at the above two classes before attempting the class hierarchy. Good luck.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 06 Mar 2012 00:00:00 +0530</pubDate><guid>tag:,2012-03-06:python-class-for-numerical-integration.html</guid><category>Programming</category><category>OOP</category><category>Python</category><category>Numerical Methods</category></item><item><title>Python function for Trapezoidal Rule</title><link>/python-function-for-trapezoidal-rule.html</link><description>&lt;p&gt;Implementing a function for numerical integration using trapezoidal rule. &lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;Here is the input I am assuming will be available:
A function of 'x' which we want to integrate. For illustration, let f(x) = 2x2 - x - 4. That is, the coefficients 2, -1 and -4.
The interval over which the function f(x) is to be integrated. In this illustration, say, from a=0 to b=5
The number of equal intervals into which the interval from a to b is to be divided. For this example, let us take n = 4
Then this is the hand calculation so that we can test our function when it is complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;       &lt;span class="n"&gt;x&lt;/span&gt;         &lt;span class="n"&gt;y&lt;/span&gt;
   &lt;span class="mf"&gt;0.000&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.000&lt;/span&gt;
   &lt;span class="mf"&gt;1.250&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.125&lt;/span&gt;
   &lt;span class="mf"&gt;2.500&lt;/span&gt;     &lt;span class="mf"&gt;6.000&lt;/span&gt;
   &lt;span class="mf"&gt;3.750&lt;/span&gt;    &lt;span class="mf"&gt;20.375&lt;/span&gt;
   &lt;span class="mf"&gt;5.000&lt;/span&gt;    &lt;span class="mf"&gt;41.000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the trapezoidal rule, the value of the integral of $f(x)$ from $a=0$ to $b=5$ is given as:
$$ \int_0^5 f(x) = \frac{b - a}{n} \left[ y_0 + 2 (y_1 + y_2 + \cdots + y_{n-1}) + y_{n} \right]$$
where $h = \frac{(b - a)}{n}$ is the constant interval width and $n$ is the number of equal intervals.&lt;/p&gt;
&lt;p&gt;Doing this calculation by hand, we get $I = 53.4375$. For the given function, finding the integral by hand is straight forward and we can calculate the value of the integral by hand, which turns out to be $50.8333$. Thus trapezoidal rule results in a value with an error of $5.12\%$ compared to the correct value.&lt;/p&gt;
&lt;p&gt;Let us now implement a function in Python to do the same calculations.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="c"&gt;# printed only when debug == True&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%5d&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%10.4f&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%10.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;     &lt;span class="c"&gt;# Main function&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;     &lt;span class="c"&gt;# Setup input values&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# call trapezoidal function&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;                           &lt;span class="c"&gt;# print result&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The first function &lt;code&gt;f(x)&lt;/code&gt; is the function to be integrated. This will need to be replaced if you wish to integrate a different function rather than the one used in this illustration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second function &lt;code&gt;trapezoidal(f, a, b, n, debug=False)&lt;/code&gt; is our user defined function to perform integration by trapezoidal rule. It takes the function to be integrated as its first parameter. The limits of integration are the second and third parameters. The fourth parameter is the number of equal intervals into which the interval from a to b will be divided. The last parameter, which is set to False by default lets you tell the function whether you want it to print the calculated values of x and y.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function &lt;code&gt;main()&lt;/code&gt; sets up the input values, calls the function to calculate the integral and prints the result.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We ensure that the function &lt;code&gt;main()&lt;/code&gt; is called only when this script is executed as the main program. It will not be executed if the script is imported as a module.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Running the script prints the result as 53.4375. Running the script by changing the value of &lt;code&gt;n&lt;/code&gt; shows that the result improves if we divide into larger number of intervals. Here is the modified function &lt;code&gt;main()&lt;/code&gt; to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%5d&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%5d&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trapezoidal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%5d&lt;/span&gt;&lt;span class="s"&gt; &lt;/span&gt;&lt;span class="si"&gt;%12.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will produce the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mf"&gt;53.4375&lt;/span&gt;

   &lt;span class="mi"&gt;10&lt;/span&gt;     &lt;span class="mf"&gt;51.2500&lt;/span&gt;

   &lt;span class="mi"&gt;20&lt;/span&gt;     &lt;span class="mf"&gt;50.9375&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are somethings you can try:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Write a class to implement trapezoidal rule. What are the merits and demerits of writing classes instead of functions?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write a function to evaluate the integral using Simpson's 1/3 rule and compare the results with the results of trapezoidal rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write a function to evaluate the integral by the Simpson's 1/3 rule when the number of intervals is odd, by using Simpson's 1/3 rule up to last but one interval and trapezoidal rule for the last interval.
Write a function to evaluate the integral using Gauss Legndre quadrature and compare the results with those of trapezoidal rule ans Simpson's 1/3 rule&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 14 Feb 2012 00:00:00 +0530</pubDate><guid>tag:,2012-02-14:python-function-for-trapezoidal-rule.html</guid><category>Programming</category><category>Python</category><category>Numerical Methods</category></item><item><title>Python Class for Quadratic Equations</title><link>/python-class-for-quadratic-equation.html</link><description>&lt;p&gt;This posts implements a Python class to represent a quadratic equation, evaluate the equation, find its roots and a few special methods. &lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;In continuation of the previous post where I implemented a Python class to represent a Line, this time I will dwell a little on its design and implement a few special functions.&lt;/p&gt;
&lt;p&gt;A quadratic equation is of the form $f(x) = ax^2 + bx + c = 0$ and the things we normally do with such an equation are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Evaluate the equation for a given value(s) of x&lt;/li&gt;
&lt;li&gt;Find the roots of the equation, that is, determine the values of x such that f(x) = 0&lt;/li&gt;
&lt;li&gt;Print out the equation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, to represent such an equation, we need to store the values of its attributes, namely, the coefficients a,  b and c. I will implement the following methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the roots of the quadratic equation. In this implementation, only real roots will be computed. Solving for complex roots will be left to you to implement.&lt;/li&gt;
&lt;li&gt;Evaluate the equation for a given value of  x&lt;/li&gt;
&lt;li&gt;Print a string representing the equation  f(x)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will use NumPy because then we can then use array implementation of mathematical functions such as &lt;code&gt;sqrt()&lt;/code&gt; instead of scalar implementation. Here is the class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Quad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="c"&gt;# change this to find complex roots&lt;/span&gt;
            &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt; &lt;span class="c"&gt;# change this to find complex roots&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;f(x) = &amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt; x**2&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; + &amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; - &amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt; x&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; + &amp;quot;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; - &amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;eq1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Quad&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# calls __init__(3.0, 2.0, -2.0)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;eq1&lt;/span&gt;                    &lt;span class="c"&gt;# calls __str__()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;f(&lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;) = &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c"&gt;# calls __call__(1.5)&lt;/span&gt;
    &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Roots: &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running this program (assuming it is saved in a file named quad.py and python directory is defined on your PATH environment variable) results in the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;quad&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.250000&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;2.000000&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.000000&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.500000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;4.812500&lt;/span&gt;
&lt;span class="nl"&gt;Roots:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.400000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some points to note:
Methods &lt;code&gt;__init__()&lt;/code&gt;, &lt;code&gt;__call__()&lt;/code&gt; and &lt;code&gt;__str__()&lt;/code&gt; cannot be called explicitly. They are implicitly called when required. &lt;code&gt;__init__()&lt;/code&gt; is called to initialize an object when it is created, &lt;code&gt;__call__()&lt;/code&gt; is called whenever we invoke an object as if it were a function and &lt;code&gt;__str__()&lt;/code&gt; is called whenever we intend to print an object.&lt;/p&gt;
&lt;p&gt;Function &lt;code&gt;disc()&lt;/code&gt; is embedded within method &lt;code&gt;roots()&lt;/code&gt; and is accessible only from inside &lt;code&gt;roots()&lt;/code&gt;.
Method &lt;code&gt;__str__()&lt;/code&gt; appears a little complicated because I am trying to print the signs of the coefficients correctly and not print it at all if it happens to be zero&lt;/p&gt;
&lt;p&gt;Because we used NumPy, we can evaluate &lt;code&gt;f(x)&lt;/code&gt; for an array &lt;code&gt;x&lt;/code&gt; containing many values instead of just 1. Add the following line at the top of the program below the line where we import the NumPy module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines at the end of the function &lt;code&gt;main()&lt;/code&gt; just before the statement &lt;code&gt;return 0&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;....&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;eq1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pyplot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then run the program. You can see a graph of the function, and you will notice that it is zero at $x = -2.0$.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 07 Feb 2012 00:00:00 +0530</pubDate><guid>tag:,2012-02-07:python-class-for-quadratic-equation.html</guid><category>Programming</category><category>OOP</category><category>Python</category><category>Numerical Methods</category></item><item><title>Python Classes</title><link>/python-classes.html</link><description>&lt;p&gt;This post demonstrates how to write a class in Python
&lt;/p&gt;
&lt;p&gt;Python supports object orientation but does not impose it. Programmer can choose to write programs entirely as a set of functions and function calls (procedural approach), entirely as classes with not a single user defined function outside a class (object oriented approach) or a mix of the two with both classes and user defined functions outside class definitions. Python supports object orientation features such as inheritance.&lt;/p&gt;
&lt;p&gt;In this post, I intend to reimplement the line length calculation as a class. See the previous post where I wrote a simple function to calculate the length of a line in 2D or 3D space.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;prj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;
        &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prj&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;prj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prj&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;L1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Length of line = &lt;/span&gt;&lt;span class="si"&gt;%10.4f&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;L1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming the program is saved in a file named &lt;code&gt;line.py&lt;/code&gt; and the python interpreter is on your &lt;code&gt;PATH&lt;/code&gt; variable, you can run this program from the command line as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output from the program should look as shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;     &lt;span class="mf"&gt;5.0000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are some points worth noting (if yoy are new to Python):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Name of the class is Line. It is a subclass of &lt;code&gt;object&lt;/code&gt;, the base class for all Python classes. You need not subclass &lt;code&gt;Line&lt;/code&gt; from &lt;code&gt;object&lt;/code&gt;. If you don't, the type of class is &lt;code&gt;&amp;lt;type 'instance'&amp;gt;&lt;/code&gt;. If you do, the type of the class is &lt;code&gt;&amp;lt;type '__main__.Line'&amp;gt;&lt;/code&gt;. To see this, just add a line &lt;code&gt;print type(L1)&lt;/code&gt; at the end of the &lt;code&gt;main()&lt;/code&gt; function. But, a beginner programmercould skip this detail at this point of time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;Line&lt;/code&gt; class has a constructor &lt;code&gt;__init__()&lt;/code&gt; and two methods &lt;code&gt;Length()&lt;/code&gt; and &lt;code&gt;dc()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;self&lt;/code&gt; is the representation of an instance of the class at runtime, required to distinguish between different instances of the class that may be created at any given point of time at runtime. Every method of the class must begin with  &lt;code&gt;self&lt;/code&gt; in order to access its own member data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All member data must be accessed using &lt;code&gt;self&lt;/code&gt;. Note that in the constructor  &lt;code&gt;__init__()&lt;/code&gt;, &lt;code&gt;p1&lt;/code&gt; is the input parameter and  &lt;code&gt;self.p1&lt;/code&gt; is the member data. When you call a method in another method of the same class, you must refer to it using &lt;code&gt;self&lt;/code&gt;. For example, to call the method &lt;code&gt;Length()&lt;/code&gt; in the method &lt;code&gt;dc()&lt;/code&gt;, the statement is &lt;code&gt;self.Line()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;main()&lt;/code&gt; function (which is not a method of the class &lt;code&gt;Line&lt;/code&gt;), we first create an instance of the &lt;code&gt;Line&lt;/code&gt; class (&lt;code&gt;L1 = Line(p1, p2)&lt;/code&gt;). We can access its data and methods by first writing the name of the instance (&lt;code&gt;L1&lt;/code&gt;), then a dot (&lt;code&gt;.&lt;/code&gt;) followed by the member data or method. For example, you can print the point &lt;code&gt;p1&lt;/code&gt; with the statement &lt;code&gt;print L1.p1&lt;/code&gt;. You can call the method &lt;code&gt;Length()&lt;/code&gt; with the statement &lt;code&gt;L = L1,Length()&lt;/code&gt;. Object orientation requires that data be private and methods public. Following that convention, we don't normally access member data in functions that are not methods of the class, but Python does not explicitly make member data private, unless the name (of either member data or method) begins with &lt;code&gt;__&lt;/code&gt; (two underscores). In such case, they are treated as private, and cannot be accessed by non-member methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Note that when calling methods, there is no argument corresponding to the parameter &lt;code&gt;self&lt;/code&gt;. It is the instance behind the dot (&lt;code&gt;.&lt;/code&gt;) operator.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are some things you could try:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create another line, this time in 3D space (3 coordinates for each end point) and calculate its length.
Calculate the direction cosines of the line using the method &lt;code&gt;dc()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add more methods that you think are essential. Can you transform the coordinates of the endpoints of the line if it were to be scaled by a specified factor?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the special method &lt;code&gt;__str__(self)&lt;/code&gt; that lets you print information about a &lt;code&gt;Line&lt;/code&gt;. This function must return a string. If such a function is defined, then you could write a statement such as &lt;code&gt;print L1&lt;/code&gt;. Then whatever is the string returned by the method &lt;code&gt;__str__()&lt;/code&gt;, it will be printed out. This way you can avoid accessing member data in non-member functions. If you want the &lt;code&gt;__str__()&lt;/code&gt; method to work irrespective of the dimension of the end points (2D, 3D or any D!), you may have to inquire the length of the array representing the point and go into a loop.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Mon, 06 Feb 2012 00:00:00 +0530</pubDate><guid>tag:,2012-02-06:python-classes.html</guid><category>Programming</category><category>OOP</category><category>Python</category></item><item><title>Scientific Python Development Tools</title><link>/scientific-python-develeopment-tools.html</link><description>&lt;p&gt;Identifying the tools needed to develop scientific and engineering applications using Python.&lt;/p&gt;
&lt;p&gt;Developing scientific and engineering applications in Python requires the following features/tools, some of which are common to all applications and a few specific to scientific/engineering applications. A programming environment with these capabilities is most likely to result in an application that meets the requirements of the end user. Here is a list, in no particular order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Strong support for both procedural and object oriented programming. The flexibility afforded by this hybrid approach frees the programmer from using a strictly laid down framework. Java is an example of a language that enforces a strict OOP approach with no option of choosing a procedural approach. Python doesn't enforce OOP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strong support for arrays and array operations. Scientific applications invariably involve data represented as vectors or matrices. A language that has native support for fast and efficient array storage, retrieval and operations is a necessary requirement for such applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strong support for building GUI applications. Scientific applications necessarily involve interaction of the user with the application. This can be best achieved through a GUI. Availability of a good GUI application framework is essential.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Visualization of data. Scientific applications require representation of data in the form of 2D and 3D graphs. Ability to display 3D rendered images of geometry is a requirement in many engineering applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generating formatted, print quality documents based on results computed by the application is an important requirement. Availability of a library to render documents in a portable format (such as PDF, PS etc.) is useful. Multi-format document generation through LaTeX are also a good option.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Database access is a useful feature in scientific applications. Such applications usually handle large amounts of data, represented in a custom format. Operations such as search, insert, delete are also frequently required. Availability of a library to connect to a database or any external datastore is a useful feature. Datastore could be server based (MySQL, PostgreSQL) or (file based (sqlite). If the library is datastore agnostic as well as able to represent data in the external datastore in software (as classes), the application becomes independent of the datastore as well as easy to program. The former technology goes by the name Database Abstraction Layer (DAL) and the latter by the name Object Relational Mapping (ORM).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Availability of a good IDE for development, debugging and testing is essential.
Ability to deploy the application either as a desktop application or as a web application would be an excellent feature. Future applications are more likely to be deployed on the web rather than on the device itself. Web applications enable easier collaboration amongst members of a team.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on these requirements, here is a list the available options for Python. First off, consider using one of several Scientific Python distributions that bundle many Python modules frequently required by scientific applications. This will avoid the problem of identifying, downloading and installing individual Python modules. Two such distributions (that I know of) are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enthought Python Distribution (EPD): EPD Free is open source whereas EPD is not. However, an academic version of EPD is available. EPD is available for Windows, Apple Mac OS X, GNU/Linux and Solaris in both 32-bit and 64-bit. One encouraging thing is the 64-bit version for Windows which is not usually available otherwise (at this point of time Dec 2011). There is support for both wxPython and PyQt, PySide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python(x,y): Python(x,y) is a scientific Python distribution with a PyQT tilt. It appears to have only 32-bit Windows version and no GNU/Linux versions (although I am not sure). It bundles Spyder, an interactive scientific development environment similar to Matlab(R).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here are the individual components that are useful:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Arrays and array operations: NumPy, SciPy&lt;/li&gt;
&lt;li&gt;GUI frameworks: wxPython, PyQt, PySide&lt;/li&gt;
&lt;li&gt;Data visualization:&lt;/li&gt;
&lt;li&gt;2D graphing: matplotlib, Enthought Chaco (in conjunction with Traits and TraitsUI)&lt;/li&gt;
&lt;li&gt;3D visualization: Mayavi (Part of the open source Enthought Tool Suite)&lt;/li&gt;
&lt;li&gt;Print document generation: ReportLab&lt;/li&gt;
&lt;li&gt;Database access: SQLAlchemy&lt;/li&gt;
&lt;li&gt;Integrated Development Environments:&lt;/li&gt;
&lt;li&gt;Lightweight IDEs: Editra, Vim, IDLE&lt;/li&gt;
&lt;li&gt;Industry strength IDEs: Eclipse with PyDev&lt;/li&gt;
&lt;li&gt;Web application frameworks: Flask, CherryPy, Bottle, Django&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew! The list is long and the learning curve steep, but who promised an easy path? All you need is the inner drive to persevere on the path to programming nirvana.&lt;/p&gt;
&lt;p&gt;The above list is based on my limited exposure to and experience working with the Python programming language. I have only just begun on this path. Watch this blog to track my progress. Mean time, you could begin exploring Python and its capabilities with reference to your own applications.&lt;/p&gt;
&lt;p&gt;Please add your comments to help improve this page by voicing your views and adding, modifying and/or correcting the information it contains.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sat, 24 Dec 2011 00:00:00 +0530</pubDate><guid>tag:,2011-12-24:scientific-python-develeopment-tools.html</guid><category>Scientific Computing</category><category>Python</category></item><item><title>Plot Graphs of Trigonometric Functions using Python</title><link>/plot-graphs-of-trigonometric-functions-using-python.html</link><description>&lt;p&gt;Plotting graphs using Python. &lt;/p&gt;
&lt;p&gt;Pylab, Python with NumPy, SciPy and Matplotlib aims to provide a viable alternative to Matlab. Here is an attempt to show how to plot sine and cosine interactively as well as through a script. I will leave it to you to decide whether it is easier or tougher than using Matlab, Scilab or GNU Octave.&lt;/p&gt;
&lt;p&gt;First, the requirements. You must have installed, Python 2 along with the following modules - NumPy, SciPy and Matplotlib. I have a preference for IPython instead of the vanilla Python console. You will have to download and install it separately.&lt;/p&gt;
&lt;p&gt;An alternative is Pylab, a bundle of IPython along with the above required libraries. A third possibility is to download Enthought Python Distribution (EPD Free). EPD Free is Pylab along with Enthought Tool Suite and other useful Python modules.&lt;/p&gt;
&lt;p&gt;Once you have all required software installed, fire up IPython and type these commands interactively:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;y2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are not using IPython, you will need to import NumPy and Matplotlib modules. You will know this if you get error messages saying some functions are not available, import the required libraries before typing the above commands. The required lines are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;same&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;above&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are not using IPython, you will also have to call the &lt;code&gt;show()&lt;/code&gt; function to display the graph. Here is the graph that will be produced:&lt;/p&gt;
&lt;p&gt;You could embellish the graph a little with the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sin(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cos(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sin(x), cos(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Harmonic Functions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the resulting graph:&lt;/p&gt;
&lt;p&gt;You could position the legend at the bottom left corner with the command
&lt;code&gt;legend(loc=3)&lt;/code&gt;. Refer the Matplotlib documentation for more details.&lt;/p&gt;
&lt;p&gt;Here is a screencast of the above steps on YouTube or watch it right here on the post.&lt;/p&gt;
&lt;p&gt;If you want to plot the same graph from a script, assume you are using the vanilla Python console and not IPython. That is, import all required modules and use the &lt;code&gt;show()&lt;/code&gt; command to finally display the graph. Here is the Python script you will need. Save it as plotsincos.py and run it from the command line using the command prompt&amp;gt;python &lt;code&gt;plotsincos.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;sin(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cos(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;sin(x), cos(x)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Harmonic Functions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I hope that was easy enough for you to complete. If not, refer to the interactive plotting tutorial on Spoken Tutorial website for the screencast.&lt;/p&gt;
&lt;p&gt;&lt;div class="videobox"&gt;
                &lt;iframe width="640" height="390"
                        src='http://www.youtube.com/v/-9uJdRSkHQA?list=UUGORmgG8jw36m343nFsWFvw'
                        frameborder='0'
                        webkitAllowFullScreen mozallowfullscreen allowFullScreen&gt;
                &lt;/iframe&gt;
            &lt;/div&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sat, 17 Dec 2011 00:00:00 +0530</pubDate><guid>tag:,2011-12-17:plot-graphs-of-trigonometric-functions-using-python.html</guid><category>Programming</category><category>Python</category><category>NumPy</category><category>Matplotlib</category></item><item><title>Writing a Python Function</title><link>/writing-a-python-function.html</link><description>&lt;p&gt;Python has the reputation of being easy to learn. So here is a function in Python to calculate the length of a line in 3D space. Well, it looks almost similar to the one written in Scilab.&lt;/p&gt;
&lt;p&gt;In a previous post, I discussed some aspects of designing functions and followed it up with implementing one in Scilab programming language. Well, functions in any programming language serve the same purpose, that of reusing code and making it possible to build large programs using functions as building blocks. They may vary in the way they are actually implemented, but the primary objective remains the same.&lt;/p&gt;
&lt;p&gt;Let me implement a function to calculate the length of a line joining two points in 3D Cartesian space. This is the same example I used when implementing the function in Scilab. What you will realize when we finish implementing the function in Python is the striking similarity between the two programming languages.&lt;/p&gt;
&lt;p&gt;As usual, we begin by choosing a name for the function (I am going to call it length), the list of input parameters (each point is an array of size 2 or 3 and there will be two points sent in as input to the function) and output parameter (length of the line joining the two points). Here is the function and the main function to call the function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;prj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prj&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;p2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Length of line =&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are some points to remember:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Our functions uses several functions that are defined in the Python module &lt;code&gt;numpy&lt;/code&gt;, namely, &lt;code&gt;array()&lt;/code&gt;, &lt;code&gt;sum()&lt;/code&gt; and &lt;code&gt;sqrt()&lt;/code&gt;. The first line imports these functions from the &lt;code&gt;numpy&lt;/code&gt; module into the current namespace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function will work irrespective of the size of the arrays p1 and p2. However, p1 and p2 must both have the same size.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The function could also be called without first defining the points, as follows:
&lt;code&gt;L = length(array([0.0, 0.0]), array([3.0, 4.0]))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you are new to Python, note the following about Python programs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Indentation is not merely decorative, it is a requirement. Indentation decides the structure of the program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is no special function with the name &lt;code&gt;main()&lt;/code&gt; (as is C/C++) that is executed first when program execution begins. However, you could write your own function named &lt;code&gt;main()&lt;/code&gt; (or anything else, if you so wish) and make it the only executable statement outside the body of function definitions. Any executable statement(s) outside the body of a function definition are executed wherever they occur (and not merely those at the bottom of the program after all function definitions are complete).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The statements following the line &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; will be executed only when the program script is executed by Python, and will not be executed, for example, when the script is imported into another script. These same lines could be bundled into another user defined function, possibly called &lt;code&gt;main()&lt;/code&gt; and called at the end of the program.&lt;/p&gt;
&lt;p&gt;As with most things, Python functions have many more features than the ones demonstrated in the above example. For example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It could return multiple return values instead of just one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Input parameters could be assigned default values that can be used in case a matching argument is not furnished during function invocation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Fri, 16 Dec 2011 00:00:00 +0530</pubDate><guid>tag:,2011-12-16:writing-a-python-function.html</guid><category>Python</category><category>Programming</category></item><item><title>Object Oriented Programming Concepts (with a C++ Flavour)</title><link>/oop-concepts-with-a-cpp-flavor.html</link><description>&lt;p&gt;A comparison of the two approaches, procedural and object oriented, to program design, development and maintenance.&lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;The title of the book by Niklaus Wirth, Algorithms + Data Structures = Programs aptly captures the essence of computer programming. The two components of programs, algorithms and data structures, are intimately related to one another and each exists to serve the other. While algorithms define actions performed on data, data structures are meant so that actions can be performed on them.&lt;/p&gt;
&lt;p&gt;In the traditional approach to program design, the procedural programming approach, procedure (algorithms) has the upper hand over data. In this approach, program design is based on the premise that the program is meant to perform a (large and possibly complex) task and the best way to accomplish this task is to break up this big task into manageable smaller tasks and sequence these tasks to accomplish the big task. Data is merely storage of information on which the tasks are to be performed. Thus the program design concerns itself with deciding the sequence of tasks and how data flows from one task to another. This is usually achieved by writing a function to perform the identified tasks. A complex task could be completed by writing a hierarchy of functions, beginning with the simplest functions and then going on to write more complex functions that in turn use the previously written simpler functions. The programmer ends up with a collection of a hierarchy of inter-related functions. This method of program design adopts concepts such as structured programming and modularity, so that it is possible to write complex programs. It adopts tools such as flow charts and documentation of functions and their inter-relationship in order to make it easy to debug and maintain complex programs developed using the procedural programming approach. Here, procedure is king, which is an indirect way of saying, data is slave to procedure.&lt;/p&gt;
&lt;p&gt;Software engineering points out that it becomes difficult to design, develop and maintain programs developed using the procedural programming approach when the program crosses a certain size. Although it is difficult to specify this limit in terms of the number of lines of code, it is well accepted that such a limit exists. This is where the new approach to program design, development and maintenance comes in, the Object Oriented Programming (OOP) approach.&lt;/p&gt;
&lt;p&gt;OOP is based on the premise that the natural way that humans use to solve problems is object oriented and not procedural. It is therefore open to question why we should use a procedural approach to problem solving when the natural way we solve problems everyday is object oriented. In this approach, program design is centered around identifying the data to represent the problem we want to solve and then look at the different actions we perform on this data. It is believed that any action that we perform has meaning only with reference to the data on which it acts and without it, the action would have no existence. Thus, actions are treated as an integral part of the data on which they act. This leads to the binding together of data and the actions performed on that data as single entity. This is the class in OOP terminology. The data become the attributes of the class and actions become the methods of the class. And, the two are inseparable. And not just that, the programming language knows they are inseparable and treats them as such. Therefore, you can call a method only with reference to an object of the class and never alone. In this approach, data is king, and consequently, procedure is slave to data.&lt;/p&gt;
&lt;p&gt;The program design procedure now requires the programmer to identify the classes required to solve the problem at hand and for each class, the associated methods. Program execution is now a matter of creating the right objects, putting data in the objects and one object communication with another through message passing (in the form of invoking the appropriate methods) amongst the different objects. Program design tools now involve class diagrams, class hierarchy diagrams, state diagrams etc.&lt;/p&gt;
&lt;p&gt;In many ways, it is true that it is possible to design, develop and maintain highly complex programs (as compared to the procedural programming approach), but this is achieved at a price. The price to pay is the added complexity of the process of program analysis, design and development. There is also the reduced run-time speed. So, it is not always true that OOP is the best approach to use. If the program is very complex, is to be maintained over a long period of time, by different developers then OOP is certainly the way to go. The additional time spent initially in understanding the problem to be solved and architecting an appropriate solution using the OOP approach will certainly pay back in terms of easier development, better communication amongst the team of developers and ease of maintenance of the code.&lt;/p&gt;
&lt;p&gt;It would be appropriate to illustrate all that was said using a simple example that almost everyone would understand. So, let us assume that the problem is to calculate the roots of a quadratic equation&lt;/p&gt;
&lt;p&gt;$$a x^2 + b x + c = 0$$&lt;/p&gt;
&lt;p&gt;Using the procedural programming approach, this would be the way a solution is devised:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To find the roots of the quadratic equation, we must first find the discriminant $d = b2 - 4ac$.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If $d$ is positive, roots are real and unequal. They can be written as:
$$x_1 = \frac{-b + \sqrt{d}}{2s}$$
and
$$x_2 = \frac{-b - \sqrt{d}}{2a}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If $d$ is zero, roots are real and equal.  They can be written as:
$$x_1 = x_2 = \frac{-b}{2a}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If $d$ is negative, roots are complex conjugate. They can be written as:
$$x_1 = \frac{-b}{2a} + i \frac{\sqrt{d}}{2a}$$
and
$$x_2 = \frac{-b}{2a} - i \frac{\sqrt{d}}{2a}$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We will need the following functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;float disc(float a, float b, float c)&lt;/code&gt; to compute the discriminant given the coefficients a, b and c.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void real_roots(float a, float b, float d, float&amp;amp; x1, float&amp;amp; x2)&lt;/code&gt; to compute the real unequal roots in case $d &amp;gt;= 0$.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void cmplx_roots(float a, float b, float d, float&amp;amp; real, float&amp;amp; imag)&lt;/code&gt; to compute the real and imaginary parts of the complex conjugate roots.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int calc_roots(float a, float b, float c, float&amp;amp; x1, float&amp;amp; x2)&lt;/code&gt; to calculate the discriminant and the roots based on the value of the discriminant. The return value of the function is an integer and can be coded such that it is $-1$ if $d &amp;lt; 0$, $0$ if $d = 0$ and $+1$ if $d &amp;gt; 0$. Looking at this value would indicate the nature of the roots.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The algorithm for the program would be as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Input data: coefficients $a$, $b$ and $c$. Check that $a$ is not zero.&lt;/li&gt;
&lt;li&gt;Calculate the discriminant $d$ using the function &lt;code&gt;disc()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If $d &amp;gt;= 0$, calculate the real roots using the function &lt;code&gt;real_roots()&lt;/code&gt;, else calculate the real and imaginary parts of the complex conjugate roots using the function &lt;code&gt;cmplx_roots()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Print the results.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Following the object oriented programming approach, program design would follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The primary object in the program is the quadratic equation. The attributes of this object are the coefficients $a$, $b$ and $c$ of the quadratic equation. These become the attributes of the object. The class to create such an object would be &lt;code&gt;class quadeqn&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The actions we perform on an object of this class are:&lt;ol&gt;
&lt;li&gt;Compute its discriminant. This would need a method &lt;code&gt;float disc()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Compute the real roots. This would need a method &lt;code&gt;float real_roots(float&amp;amp; x1, float&amp;amp; x2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Compute the complex conjugate roots. This would require a method &lt;code&gt;float cmplx_roots(float&amp;amp; x1, float&amp;amp; x2)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A master function &lt;code&gt;int calc_roots()&lt;/code&gt; to compute the discriminant, calculate the roots depending on the value of the discriminant, along the lines described above.&lt;/li&gt;
&lt;li&gt;Read data and put it into the object. Print the roots&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Program would follow this flow:&lt;ol&gt;
&lt;li&gt;Create an object of type &lt;code&gt;quadeqn&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Input data from the user and put it into the object.&lt;/li&gt;
&lt;li&gt;Invoke the method &lt;code&gt;calc_roots()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Print the roots.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You will notice that the functions of the procedural approach and methods of the object oriented approach are quite similar. But there are a few differences. The methods of the OO approach have access to the attributes of the object and therefore need not be explicitly passed in as arguments. This is the advantage of binding data and methods together as a single composite package, the object.&lt;/p&gt;
&lt;p&gt;Obviously, using OOAD (object oriented analysis and design) to develop a program to find the roots of a quadratic equation is overkill, but you can see its advantages if this is part of a bigger program that uses such a class. If all you wanted to do was to find the roots and be done with it, procedural approach would certainly be the way to go.&lt;/p&gt;
&lt;p&gt;Of course, as with most things in life, the discussion above is not the whole picture. OOP and procedural approach use many more concepts than what is discussed. While it is true that OOP is better able to handle complex program architectures, it does not mean that complex programs cannot be written using the procedural approach. All you have to do is look at the existing large numerical libraries to understand this. There are also a number of non-numerical libraries and programs to support this statement. It is also true that merely adopting the OO approach does not automatically guarantee good programs. It is quite possible to write a messy program using the OO approach, as easily as you can using the procedural approach.&lt;/p&gt;
&lt;p&gt;In the end, it can be summarised that each approach adopts its own conceptual tools and procedures and each has its strengths and weaknesses. It is best left to the programmer to decide the most appropriate approach to adopt for a given task.&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Tue, 29 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-29:oop-concepts-with-a-cpp-flavor.html</guid><category>OOP</category><category>C++</category><category>Programming</category></item><item><title>C++ valarray</title><link>/cpp-valarray.html</link><description>&lt;p&gt;C++ valarray is a class template to represent an array of numerical values. It is versatile and comes with all basic features required for a one-dimensioned array. &lt;!-- PELICAN_END_SUMMARY --&gt;&lt;/p&gt;
&lt;p&gt;Arrays in C++ are identical to those in C. Consequently, operators, such as $+, -, *, /$ are not defined for arrays. C++ classes are a user defined data type (UDT) for which the programmer can define operators, thereby making the UDT similar to built-in data types. Therefore a program statement such as &lt;code&gt;c = a + b&lt;/code&gt; can be written for a class representing a vector (one-dimensioned array) or a matrix (two-dimensioned array) provided the class defines the required method for the operator.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;valarray&lt;/code&gt; is a class template in the C++ standard library to represent one-dimensioned arrays of numerical values. It is meant to represent arrays of non-numeric data types (such as char or bool) for which operators +, -, * would not have a meaning.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;valarray&lt;/code&gt; is much more than an array. Following are possible with a valarray:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You can create a valarray of any numeric type. For example &lt;code&gt;valarray&amp;lt;int&amp;gt; x(10)&lt;/code&gt; creates &lt;code&gt;x&lt;/code&gt; as a valarray with 10 integer elements. In the same way, &lt;code&gt;valarray&amp;lt;float&amp;gt; y(20)&lt;/code&gt; creates &lt;code&gt;y&lt;/code&gt; as a valarray with 20 float elements.&lt;/li&gt;
&lt;li&gt;Selected operations on valarray are defined. Thus &lt;code&gt;c = a + b&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; are valarrays of compatible types works. So do other operations such as &lt;code&gt;-&lt;/code&gt; (subtraction), &lt;code&gt;*&lt;/code&gt; (element wise multiplication), &lt;code&gt;=&lt;/code&gt; (assignment), &lt;code&gt;[]&lt;/code&gt; (subscripting and assignment).&lt;/li&gt;
&lt;li&gt;No error checking is performed for subscripting or assignment. It is programmer's responsibility to ensure that the array bounds are not crossed while performing any operations. Error checking is sacrificed to achieve speed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The strength of a valarray is that when used along with other classes such as &lt;code&gt;slice&lt;/code&gt;, &lt;code&gt;gslice&lt;/code&gt;, &lt;code&gt;slice_array&lt;/code&gt;, &lt;code&gt;gslice_array&lt;/code&gt;, it is possible to impose a two-dimensional or a multi-dimensional view on the one-dimensioned valarray. However, I have not been able to work out how to change the start index of the initial element, other than through use of pointers. But Chapter 22 Numerics from Stroustrup, B., &lt;em&gt;The C++ Programming Language&lt;/em&gt; has an assignment question precisely for this solution. Does anyone know whether there is a solution manual for this book?&lt;/p&gt;
&lt;p&gt;Here are a few selected problems from Exercise 22.9 from this book:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prob. 6 (*2.5) Define and implement a three-dimensional matrix with suitable operations.&lt;/li&gt;
&lt;li&gt;Prob. 7 (*2.5) Define and implement an n-dimensional matrix with suitable operations.&lt;/li&gt;
&lt;li&gt;Prob. 9 *3) Implement a Fortran style array Fort_array where indices start from 1 rather than 0.&lt;/li&gt;
&lt;li&gt;Prob. 10 (*3) Implement Matrix using a valarray member as the representation of the elements (rather than a pointer or a reference to a valarray).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stroustrup, B., &lt;em&gt;The C++ Programming Language&lt;/em&gt;, Special Edition, Addison-Wesley, 2000 (There could be a more recent edition than the one I am referring)&lt;/p&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sat, 26 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-26:cpp-valarray.html</guid><category>OOP</category><category>Programming</category><category>C++</category><category>Numerical Methods</category></item><item><title>C++ Class Templates</title><link>/cpp-class-templates.html</link><description>&lt;p&gt;A class template is a parameterized class definition.
&lt;/p&gt;
&lt;p&gt;A class template in C++ is a parameterized class. That is, a class definition in terms of a placeholder for the data type that you intend to use when you want to instantiate an object of the class. If you think that is not a clear explanation, then here is an analogy. When you define a function, the input and output parameters are placeholders for the arguments you intend to supply when the function is to be invoked. During function definition, they are merely parameters. Their actual value is defined when you invoke the function. In fact, you can use different arguments each time you invoke the function. When this concept is extended to a class definition, you get a class template. A typical class template looks as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;mymatrix&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
  &lt;span class="c1"&gt;// private member data and methods go here&lt;/span&gt;

&lt;span class="nl"&gt;public:&lt;/span&gt;
  &lt;span class="c1"&gt;// public methods and member data if any, go here&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note the &lt;code&gt;T&lt;/code&gt; within angle brackets &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;, which is the parameter in this class template definition. The whole class definition is in terms of this data type. Once this class template is available, it is easy to instantiate a class of this type. When you do so, you will have to tell what you want replace &lt;code&gt;T&lt;/code&gt; with. This is what you would do if you wanted to create a &lt;code&gt;class mymatrix&lt;/code&gt; of integers, floats and chars:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;mymatrix&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Of course, you could add two matrices of type float (provided the operation is possible) by defining a method for the operator &lt;code&gt;+&lt;/code&gt;. But, such an operator would be meaningless for a matrix of chars. It is therefore the responsibility of the programmer to convey to the users of the class how it must be used.&lt;/p&gt;
&lt;p&gt;When you instantiate a class based on the class template, an entire class is created for the specified type. This is done at compile time so that the class is available when the program is executed. Only those classes based on the class template will be created that are instantiated in the given program. Thus, in the above example, three classes are created, one each for integers, floats and chars. But not for other data types, for example, doubles. Not because it can't be done, but because it is not required in this specific program.&lt;/p&gt;
&lt;p&gt;The power of a class template is that it is everything that a class is, yet at the same time, it is a template for a number of related classes. This saves you development time and debugging time because you now have to test only one class template instead of a set of related classes. When you want to create a set of identical classes which differ only on the data type used in their definition, you can save a lot of effort and time by writing a class template, provided such a template is meaningful for the data types you are likely to use it with.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Fri, 25 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-25:cpp-class-templates.html</guid><category>OOP</category><category>C++</category><category>Programming</category></item><item><title>Array Indexing and Memory Allocation in Programming Languages</title><link>/array-indexing-and-memory-allocation.html</link><description>&lt;p&gt;Demystifying array indexing and memory storage schemes used by programming languages.&lt;/p&gt;
&lt;p&gt;When it comes to arrays, there are two things to wrap your brain around:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Internal storage allocated for the array&lt;/li&gt;
&lt;li&gt;Indexing the elements of the array so that we can read from or write to those elements.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All programming languages agree on the first: Memory for an array is allocated in a contiguous block. All elements of an array are assumed to be of the same data type. This makes it possible to access any element of the array if we know the location in memory of the initial element. This applies to an array with any dimension, one-dimensioned, two-dimensoned or multi-dimensioned.&lt;/p&gt;
&lt;p&gt;Different programming languages differ on the second: Index of the initial element (element for one-dimensioned arrays, row or column for two-dimensioned arrays and so on for multi-dimensioned arrays) is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Zero in C/C++, Python, PHP and cannot be changed (at least for static arrays).&lt;/li&gt;
&lt;li&gt;One by default in Fortran, but can be changed to any integer value, positive or negative if need be.&lt;/li&gt;
&lt;li&gt;One by default in Scilab, GNU Octave, Matlab(R) and cannot be changed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(Note: I am not sure about Pascal, but I remember it is similar to Fortran)&lt;/p&gt;
&lt;p&gt;Thus, while the programmer may wish to view the array as one-, two- or multi-dimensioned, memory allocation (addressing) is always one-dimensioned. What I intend to do in this post is to show how elements are mapped from a n-dimensioned array yo a one-dimensioned array in different languages. It will be assumed that the index of the initial element of the array in memory is consistent with the convention used by the respective languages.&lt;/p&gt;
&lt;p&gt;Mapping an element of an one-dimensioned array to memory is straight forward because both the array and memory are one-dimensioned. Whatever is the index of the element is also the location of the element in memory as long as you use the initial index consistently.&lt;/p&gt;
&lt;p&gt;Indexes of an element of a two-dimensioned array is (i,j) where 'i' is the row index and 'j' is the column index. In Fortran/Scilab/GNU Octave, the initial row is indexed as 1 (although it can be changed to any value in Fortran). In C/C++/Python/PHP the initial row is indexed as 0. Same goes for columns. Thus, an element with index (i,j) is mapped to the element in memory as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fortran/Scilab/GNU Octave: Element (i,j) of the matrix is mapped to the element (j-1)*m+i in storage, counting initial row and column as 1 and initial element in storage as 1. Indexing is column-wise, or left most index varies fastest. In order to use this mapping function, it is necessary that we know the number of rows in each column (because we are going column-wise).&lt;/li&gt;
&lt;li&gt;C/C++, Python, PHP: Element (i,j) of the matrix is mapped to the element (i*n+j) in storage, counting initial row and column as 0 and initial element in storage as 0. Indexing is row-wise, or right most index varies fastest. In order to use this mapping function, it is necessary to know the number of columns in each row (because we are going row-wise).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Extending the same logic to 3-dimensioned or in general n-dimensioned array requires you to stop thinking in terms of rows and columns because it becomes over-whelming once you cross 3-dimensioned. For example, a 3-dimensioned array could be thought of as a deck of cards, with each card having the same number of rows and columns. A 4-dimensioned array could be thought of as boxes of sets of cards (with each box containing the same number of cards), with each card consisting of same number of rows and columns. Whew! An easier approach is to say that an element in an n-dimensioned array requires n-indexes. These elements are stored contiguous in memory. Elements of the array are mapped to the memory location by one of the following schemes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Left-most Index Varies Fastest Scheme (Fortran, Scilab, GNU Octave):&lt;/strong&gt; Left most index varies fastest. In order to map an element of array to memory, we will need the sizes of all indexes except the right most. The mapping formula for the element (i, j, k) of a 3-dimensioned array of size n1 x n2 x n3 is (i-1)&lt;em&gt;n2&lt;/em&gt;n3&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Right-most Index Varies Fastest  Scheme (C/C++, Python):&lt;/strong&gt; Right most index varies fastest. In order to map an element of the array to memory, we will need the sizes of all indexes except the left most.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is an example illustrating the above points for a 2-dimensioned array. Consider a 2-dimensioned array of size 3x4 (3 rows and 4 columns). The diagram below shows the programmer's view of the array and the memory storage for the array using the two different schemes described above:&lt;/p&gt;
&lt;p&gt;It is possible to write a C/C++ program to show that this is correct by printing out the addresses of the elements of an array. Other programming languages do not permit printing addresses thereby making it difficult to verify this. However, when initializing data in named DATA statements in BLOCKDATA SUBPROGRAMS in Fortran requires the elements to be entered column-wise, hinting at the way the array is stored in memory.&lt;/p&gt;
&lt;p&gt;Any corrections and/or improvements to the above discussion are welcome and will be incorporated either directly in the post as corrections or left as comments at the end of the post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Mon, 21 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-21:array-indexing-and-memory-allocation.html</guid><category>Arrays</category><category>Programming</category><category>C++</category><category>Python</category><category>Fortran</category><category>Scilab</category></item><item><title>Object Oriented Numerics</title><link>/object-oriented-numerics.html</link><description>&lt;hr /&gt;
&lt;p&gt;Object oriented programming and scientific and numerical computing.&lt;/p&gt;
&lt;p&gt;Some of my previous posts have dealt with arrays in C/C++, and some of the topics that have been discussed are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static arrays and dynamic arrays, both one- and two-dimensioned.&lt;/li&gt;
&lt;li&gt;Dynamic arrays with user specified start index.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But some other issues remain. For example:
1. Attributes of the array, such as, the number of rows and columns must be stored separate from the array itself. That is, these attributes are not an integral part of the array.
2. Operations on arrays are not defined. Thus c = a + b, works if a, b and c are integer or real numbers but does not work if a, b and c are arrays.
3. The first issue could be addressed if we use the abstract data type struct. But this advantage is realizable only at the cost of added complexity (as is the case with most things in life!). The programmer now needs to have mastery over user defined data types (UDTs) and its associated semantics. Here is one possible UDT to represent a matrix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;nr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* Number of rows and columns */&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="cm"&gt;/* Start index of rows and columns */&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* Pointer for dynamic memory allocation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But the second issue still remains. Since C does not permit a programmer to define operators for UDTs, we need to define suitable functions to perform operations on this UDT. For example, to add two given matrices &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and return the sum &lt;code&gt;c&lt;/code&gt;, we can write a function &lt;code&gt;float** mat_add(float** a, float** b)&lt;/code&gt;. This function would perform the necessary checks to see if it is possible to add the two given matrices and return the sum of the matrices if this operation is permissible or an error otherwise. There are a number of operations we would need, including, creating a new matrix, deleting an existing matrix, assigning values to a matrix, addition, subtraction and multiplication, transpose, inversion, determinant and the list could go on.&lt;/p&gt;
&lt;p&gt;Here are some, as yet unresolved, issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We need to develop a library of functions exclusively for the purpose of performing operations on our user defined data type. But as far as the programming language is concerned, they are in no way related. In fact, the programmer is the one who knows the intimate relationship between the user defined data type and the library of functions to operate on this data type.&lt;/li&gt;
&lt;li&gt;The UDT shown above is only for a matrix of float elements. If we wanted a matrix of any other data type, we would have to define a number of structs, one for each of the data types. This also applies to the functions. We need a separate library of functions for each data type.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Object oriented programming (OOP) could resolve these issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;OOP lets the programmer define a class (similar to struct), but comes with a number of features (such as data hiding, member functions, constructors and destructors). Functions that are written to work exclusively with a specific class are made member function of the class. Thus, the relationship between the class and its methods are known to the compiler and can therefore raise triggers.&lt;/li&gt;
&lt;li&gt;OOP in C++ allows the programmer to define a class template. Using this feature, it is  possible to define the matrix class in terms of an assumed data type and specify this data type at the time of instantiating an object. Thus, a class template can create as many classes as required in a specific program at compile time so that objects of the required type can be created at run time. Only that many classes are created as are required in the given program. All classes so created are identical except for the difference in the data type.&lt;/li&gt;
&lt;li&gt;Operators can be created for the class template, but operation must be identical to all classes. That is, if you define the addition operator for a matrix of floats, the operation is identical for a matrix of int and double, but has no meaning for a matrix of &lt;code&gt;char&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A post in the near future will focus on the implementation of such a class template. Doing so right now may be more than what one could digest in one go. Moreover, giving food for thought and letting one try their own ideas based on this concept could be a motivating factor for many. Until the next post, bye!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;http://www.oonumerics.org&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stroustrup, B., &lt;em&gt;The C++ Programming Language&lt;/em&gt;, 3ed., Addison Wesley, ISBN 0-201-88954-4 (Chapter 22. Numerics)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Fri, 18 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-18:object-oriented-numerics.html</guid><category>C++</category><category>OOP</category><category>Programming</category></item><item><title>Free as in Freedom - Richard M. Stallman's Biography by Sam Williams</title><link>/free-as-in-freedom-richard-m-stallmans-biography-by-sam-williams.html</link><description>&lt;p&gt;Free as in Freedom is Richard M. Stallman's biography by Sam Williams that is available as an Open Book by O'Reilly.
&lt;/p&gt;
&lt;p&gt;It took me quite some time to fully comprehend the meaning of the word "Free" in the definition of "Free Software". But when I did finally understand it, its enormity was astounding. And the reason why Richard Matthew Stallman (RMS in short) tenaciously sticks to that word (and insists that others should too) when alternate definitions such as "open source" have become more recognizable (or fashionable) is interesting reading. Free as in Freedom is RMS' biography by Sam Williams and is a fascinating story of the role played by others in the FOSS movement (Eric S. Raymond, Bruce Perens, Linus Torvalds and a number of others from the FOSS world), software technology, early hacker culture and gives a glimpse of what we see today in the world of hardware, software and Internet.&lt;/p&gt;
&lt;p&gt;His work on Emacs, GCC, GDB, gmake is highly respected and the GNU Project forms substantial component of the GNU/Linux operating system. In fact, GNU Project had all components of the GNU Hurd operating system which it set out to develop, except the kernel.&lt;/p&gt;
&lt;p&gt;Sam Williams builds a compelling narrative in his attempt to understand RMS and find what motivates him in his quest for freedom. RMS comes across as a mix of genius, obstinate (sometimes even abrasive) but no one, not even his detractors, deny the quality of his body of work (GNU Project) and the strength of the GNU GPL. The biography is completely non-adulative of its subject, in fact, at times a little critical of the subject. But a compulsive reading. Everyone interested in FOSS must read this biography.&lt;/p&gt;
&lt;p&gt;Once you have read Free as in Freedom, you will find other open books from O'Reilly entitled Open Sources: Voices from the Open Source Revolution. Website of the Free Software Foundation discuss software licenses and the choice of the words "Free" and "Open Source".&lt;/p&gt;
&lt;p&gt;If you recollect, on Steve Jobs' passing away, RMS said in his blog "Steve Jobs, the pioneer of the computer as a jail made cool, designed to sever fools from their freedom, has died." He also followed it up later to clarify that he is not glad that he is dead, but glad he is gone (But even more interesting is his follow up on this post, correcting his quote for the purpose of "accuracy." Typical of RMS, his penchant for accuracy!) There are any number of responses to this, ranging from incisive to lunatic. That is exactly the kind of response RMS has received all his life. And that is exactly what RMS is. You may love him or hate him, but no way can you ignore him.&lt;/p&gt;
&lt;p&gt;World does need geniuses like RMS to help "keep its head on its shoulders" while it dreams of "walking with its head in the clouds."&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sun, 13 Nov 2011 00:00:00 +0530</pubDate><guid>tag:,2011-11-13:free-as-in-freedom-richard-m-stallmans-biography-by-sam-williams.html</guid><category>People</category><category>FOSS</category><category>Book Review</category></item><item><title>Functions in Programming Languages</title><link>/functions-in-programming-languages.html</link><description>&lt;p&gt;Functions are modular blocks of code that help you build complex programs.
&lt;/p&gt;
&lt;h3&gt;Sources of Functions&lt;/h3&gt;
&lt;p&gt;There are several sources for functions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Functions that are part of the standard library of the programming language:&lt;/strong&gt; For example the C standard library has a number of functions for a variety of uses, such as, scanf() to read input from the standard input device, sqrt() to calculate the square root of a number, toupper() to convert lower case characters in a string to upper case. This is true of all programming languages. The programmer needs to study the list of standard library functions for each language.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions developed by the programmer for his/her own use:&lt;/strong&gt; A programmer can develop her own functions in case the standard library does not have one that is appropriate. It is common to develop one's own set of functions for a given application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Functions developed by others for application to specific specialized areas of application:&lt;/strong&gt; There are a number of free and open source as well as closed source libraries of applications for specialized areas of application such as mathematics (for example, LAPACK for linear algebra, Blitz++ for object oriented numerics and matrix computations), High performance graphics (OpenGL), Computer vision (OpenCV) and a host of others. Such libraries are developed by experts and may be too difficult for individual programmers to develop on their own.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Function as a Black Box&lt;/h3&gt;
&lt;p&gt;A programmer who uses a function developed by others may or may not know how the function performs its intended task. This is the blackbox analogy, wherein the user of the function only knows how to use the function while its inner working details are either unknown to the user or of no concern. This is the basic concept that enables one to write complex software, otherwise each programmer would have to develop her own functions for each task.&lt;/p&gt;
&lt;h3&gt;What You Should Know About a Function&lt;/h3&gt;
&lt;p&gt;A programmer must know the following information about the function in order to use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Name of the function:&lt;/strong&gt; Name of the function is the handlw by which it can be invoked.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Input arguments:&lt;/strong&gt; The input data that the programmer must pass on to the function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output arguments:&lt;/strong&gt; The data that the function returns that the programmer must store for subsequent use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Having a name for the function that reflect its purpose has multiple benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The programmer will find it easy to associate the function with its purpose.&lt;/li&gt;
&lt;li&gt;While reverse engineering a program, it helps other programmers quickly understand the purpose of the function.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A function exchanges data with its parent function. Parent function invokes the function, pumps in data from its scope into the function and waits for the function to finish its job. When the function completes its job, control returns to the parent function, and the function call is replaced by the value returned by the function.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Satish Annigeri</dc:creator><pubDate>Sun, 02 Oct 2011 00:00:00 +0530</pubDate><guid>tag:,2011-10-02:functions-in-programming-languages.html</guid></item></channel></rss>